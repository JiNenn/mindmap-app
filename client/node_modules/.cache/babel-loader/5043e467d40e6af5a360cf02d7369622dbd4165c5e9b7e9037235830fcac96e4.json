{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ThankButton from './ThankButton';\n\n/**\r\n * MindmapCanvas.js\r\n * \r\n * キャンバス上でノードを自由配置・編集するコンポーネント\r\n * 追加機能:\r\n * - ノード追加ボタン\r\n * - 線（エッジ）追加モード：ノードを選択して線を引く\r\n * - SVG を利用してノード間の線（エッジ）を描画\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n\n  // ドラッグ開始（エッジ追加モードの場合は無効）\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n\n  // ドラッグ中\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const containerRect = e.currentTarget.getBoundingClientRect();\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // ドラッグ終了\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n    }\n  };\n\n  // ノード追加機能\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n\n  // ノードクリック時の処理（エッジ追加モード）\n  const handleNodeClick = (node, index) => {\n    if (!isEdgeMode) return; // 通常モードでは何もしない\n    if (!edgeStart) {\n      // エッジの開始ノードを設定\n      setEdgeStart(node.nodeId);\n    } else {\n      if (edgeStart === node.nodeId) {\n        // 同じノードが再度クリックされたらリセット\n        setEdgeStart(null);\n      } else {\n        // エッジ追加：開始ノードとクリックしたノードを接続\n        const newEdge = {\n          id: `edge_${Date.now()}`,\n          from: edgeStart,\n          to: node.nodeId\n        };\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n        setMindmap({\n          ...mindmap,\n          edges: newEdges\n        });\n        // リセット\n        setEdgeStart(null);\n      }\n    }\n  };\n\n  // エッジ削除：線クリック時に確認\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n\n  // ヘルパー：nodeId からノード情報を取得\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEdgeMode(!isEdgeMode);\n          setEdgeStart(null);\n        },\n        style: {\n          marginLeft: 10\n        },\n        children: isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), isEdgeMode && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 10,\n          color: 'blue'\n        },\n        children: edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '500px',\n        border: '1px solid #777',\n        overflow: 'hidden'\n      },\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none'\n        },\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + 50 // 調整：ノードの大体の幅/2（仮）\n            ,\n            y1: fromNode.y + 20 // 調整：ノードの高さ/2（仮）\n            ,\n            x2: toNode.x + 50,\n            y2: toNode.y + 20,\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: node.x,\n          top: node.y,\n          padding: '8px 12px',\n          background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\n          border: '1px solid #333',\n          borderRadius: '4px',\n          cursor: isEdgeMode ? 'pointer' : 'move',\n          userSelect: 'none'\n        },\n        onMouseDown: e => handleDragStart(e, idx),\n        onClick: () => handleNodeClick(node, idx),\n        children: node.text\n      }, node.nodeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          bottom: 10,\n          left: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(ThankButton, {\n          mindmapId: mindmap.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"tX5/BKwx5lC6lFtIOjtpYfi/IME=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","ThankButton","jsxDEV","_jsxDEV","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","handleDragStart","e","index","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","containerRect","currentTarget","newX","newY","newNodes","nodes","x","y","handleMouseUp","addNode","newNodeId","Date","now","newNode","nodeId","text","Math","random","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","filter","edge","getNodeById","find","n","children","style","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","color","position","width","height","border","overflow","onMouseMove","onMouseUp","pointerEvents","map","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","idx","padding","background","borderRadius","cursor","userSelect","onMouseDown","bottom","mindmapId","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ThankButton from './ThankButton';\r\n\r\n/**\r\n * MindmapCanvas.js\r\n * \r\n * キャンバス上でノードを自由配置・編集するコンポーネント\r\n * 追加機能:\r\n * - ノード追加ボタン\r\n * - 線（エッジ）追加モード：ノードを選択して線を引く\r\n * - SVG を利用してノード間の線（エッジ）を描画\r\n */\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n\r\n  // ドラッグ開始（エッジ追加モードの場合は無効）\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  // ドラッグ中\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const containerRect = e.currentTarget.getBoundingClientRect();\r\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // ドラッグ終了\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n    }\r\n  };\r\n\r\n  // ノード追加機能\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200\r\n    };\r\n    setMindmap({ \r\n      ...mindmap, \r\n      nodes: [...mindmap.nodes, newNode]\r\n    });\r\n  };\r\n\r\n  // ノードクリック時の処理（エッジ追加モード）\r\n  const handleNodeClick = (node, index) => {\r\n    if (!isEdgeMode) return; // 通常モードでは何もしない\r\n    if (!edgeStart) {\r\n      // エッジの開始ノードを設定\r\n      setEdgeStart(node.nodeId);\r\n    } else {\r\n      if (edgeStart === node.nodeId) {\r\n        // 同じノードが再度クリックされたらリセット\r\n        setEdgeStart(null);\r\n      } else {\r\n        // エッジ追加：開始ノードとクリックしたノードを接続\r\n        const newEdge = {\r\n          id: `edge_${Date.now()}`,\r\n          from: edgeStart,\r\n          to: node.nodeId\r\n        };\r\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n        setMindmap({ ...mindmap, edges: newEdges });\r\n        // リセット\r\n        setEdgeStart(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  // エッジ削除：線クリック時に確認\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  // ヘルパー：nodeId からノード情報を取得\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 操作用のボタン群 */}\r\n      <div style={{ marginBottom: 10 }}>\r\n        <button onClick={addNode}>ノード追加</button>\r\n        <button \r\n          onClick={() => {\r\n            setIsEdgeMode(!isEdgeMode);\r\n            setEdgeStart(null);\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {isEdgeMode && (\r\n          <span style={{ marginLeft: 10, color: 'blue' }}>\r\n            {edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'}\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      {/* キャンバス領域 */}\r\n      <div \r\n        style={{ \r\n          position: 'relative', \r\n          width: '100%', \r\n          height: '500px', \r\n          border: '1px solid #777',\r\n          overflow: 'hidden'\r\n        }}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* SVGレイヤー：ノード間の線（エッジ）を描画 */}\r\n        <svg \r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: 'none'\r\n          }}\r\n        >\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + 50}  // 調整：ノードの大体の幅/2（仮）\r\n                y1={fromNode.y + 20}  // 調整：ノードの高さ/2（仮）\r\n                x2={toNode.x + 50}\r\n                y2={toNode.y + 20}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n        {/* ノード描画 */}\r\n        {mindmap.nodes.map((node, idx) => (\r\n          <div\r\n            key={node.nodeId}\r\n            style={{\r\n              position: 'absolute',\r\n              left: node.x,\r\n              top: node.y,\r\n              padding: '8px 12px',\r\n              background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\r\n              border: '1px solid #333',\r\n              borderRadius: '4px',\r\n              cursor: isEdgeMode ? 'pointer' : 'move',\r\n              userSelect: 'none'\r\n            }}\r\n            onMouseDown={(e) => handleDragStart(e, idx)}\r\n            onClick={() => handleNodeClick(node, idx)}\r\n          >\r\n            {node.text}\r\n          </div>\r\n        ))}\r\n        {/* キャンバス下部に「ありがとう」ボタンを配置 */}\r\n        <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n          <ThankButton mindmapId={mindmap.id} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}