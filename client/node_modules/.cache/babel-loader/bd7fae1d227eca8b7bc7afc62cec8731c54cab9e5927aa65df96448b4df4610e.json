{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ThankButton from './ThankButton';\n\n/**\r\n * MindmapCanvas.js\r\n * \r\n * キャンバス上でノードを自由配置・編集するコンポーネント\r\n * 追加機能:\r\n * - ノード追加、エッジ追加モードは既存実装\r\n * - ゴミ箱アイコンによるドラッグ＆ドロップでの削除機能\r\n * - ノードのダブルクリックでインライン文字編集\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n  const [editingNodeId, setEditingNodeId] = useState(null);\n  const [editingText, setEditingText] = useState('');\n\n  // ゴミ箱のhover状態\n  const [trashHovered, setTrashHovered] = useState(false);\n  const trashRef = useRef(null);\n\n  // ドラッグ開始（エッジ追加モードの場合は無効）\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode) return;\n    // ダブルクリックなどで編集中は処理しない\n    if (editingNodeId) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n\n  // ドラッグ中\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const containerRect = e.currentTarget.getBoundingClientRect();\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n\n    // ゴミ箱との重なり判定\n    if (trashRef.current) {\n      const trashRect = trashRef.current.getBoundingClientRect();\n      // ノードの中心位置（仮にノードサイズは約100×40）\n      const nodeCenterX = newX + 50;\n      const nodeCenterY = newY + 20;\n      if (nodeCenterX >= trashRect.left && nodeCenterX <= trashRect.right && nodeCenterY >= trashRect.top && nodeCenterY <= trashRect.bottom) {\n        setTrashHovered(true);\n      } else {\n        setTrashHovered(false);\n      }\n    }\n  };\n\n  // ドラッグ終了：削除判定を実施\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      // ゴミ箱上でドロップされた場合、対象ノードを削除\n      if (trashHovered) {\n        const newNodes = mindmap.nodes.filter((_, idx) => idx !== dragging.nodeIndex);\n        setMindmap({\n          ...mindmap,\n          nodes: newNodes\n        });\n      }\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n      setTrashHovered(false);\n    }\n  };\n\n  // ノード追加機能\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n\n  // ノードクリック時の処理（エッジ追加モード）\n  const handleNodeClick = (node, index) => {\n    if (isEdgeMode) {\n      if (!edgeStart) {\n        setEdgeStart(node.nodeId);\n      } else {\n        if (edgeStart === node.nodeId) {\n          setEdgeStart(null);\n        } else {\n          const newEdge = {\n            id: `edge_${Date.now()}`,\n            from: edgeStart,\n            to: node.nodeId\n          };\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n          setMindmap({\n            ...mindmap,\n            edges: newEdges\n          });\n          setEdgeStart(null);\n        }\n      }\n    }\n  };\n\n  // エッジ削除：線クリック時に確認\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n\n  // ヘルパー：nodeId からノード情報を取得\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\n  };\n\n  // ノードのダブルクリックで文字編集を開始\n  const handleNodeDoubleClick = node => {\n    if (isEdgeMode) return;\n    setEditingNodeId(node.nodeId);\n    setEditingText(node.text);\n  };\n\n  // 編集完了時の処理\n  const handleEditFinish = nodeId => {\n    const newNodes = mindmap.nodes.map(node => {\n      if (node.nodeId === nodeId) {\n        return {\n          ...node,\n          text: editingText\n        };\n      }\n      return node;\n    });\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n    setEditingNodeId(null);\n    setEditingText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEdgeMode(!isEdgeMode);\n          setEdgeStart(null);\n        },\n        style: {\n          marginLeft: 10\n        },\n        children: isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), isEdgeMode && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 10,\n          color: 'blue'\n        },\n        children: edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '500px',\n        border: '1px solid #777',\n        overflow: 'hidden'\n      },\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none'\n        },\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + 50,\n            y1: fromNode.y + 20,\n            x2: toNode.x + 50,\n            y2: toNode.y + 20,\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => {\n        // ドラッグ中のノードは大きく表示（scale 1.1）、ただしゴミ箱上なら元のサイズ\n        const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\n        const scale = isDraggingNode ? trashHovered ? 1.0 : 1.1 : 1.0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: node.x,\n            top: node.y,\n            padding: '8px 12px',\n            background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\n            border: '1px solid #333',\n            borderRadius: '4px',\n            cursor: isEdgeMode ? 'pointer' : 'move',\n            userSelect: 'none',\n            transform: `scale(${scale})`,\n            transformOrigin: 'center'\n          },\n          onMouseDown: e => handleDragStart(e, idx),\n          onClick: () => handleNodeClick(node, idx),\n          onDoubleClick: () => handleNodeDoubleClick(node),\n          children: editingNodeId === node.nodeId ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editingText,\n            onChange: e => setEditingText(e.target.value),\n            onBlur: () => handleEditFinish(node.nodeId),\n            onKeyDown: e => {\n              if (e.key === 'Enter') handleEditFinish(node.nodeId);\n            },\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this) : node.text\n        }, node.nodeId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: trashRef,\n        style: {\n          position: 'absolute',\n          bottom: 20,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          pointerEvents: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: trashHovered ? 50 : 30,\n          height: trashHovered ? 50 : 30,\n          viewBox: \"0 0 24 24\",\n          fill: \"red\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M3 6h18v2H3zm2 3h14l-1.5 12.5a2 2 0 01-2 1.5H8.5a2 2 0 01-2-1.5L5 9zm5 2v9h2v-9H10zm4 0v9h2v-9h-2zM9 4V2h6v2h5v2H4V4z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          bottom: 10,\n          left: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(ThankButton, {\n          mindmapId: mindmap.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"YBpnmEM26ts8ylxLfrdp8/88HZA=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ThankButton","jsxDEV","_jsxDEV","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","editingNodeId","setEditingNodeId","editingText","setEditingText","trashHovered","setTrashHovered","trashRef","handleDragStart","e","index","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","containerRect","currentTarget","newX","newY","newNodes","nodes","x","y","current","trashRect","nodeCenterX","nodeCenterY","right","bottom","handleMouseUp","filter","_","idx","addNode","newNodeId","Date","now","newNode","nodeId","text","Math","random","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","edge","getNodeById","find","n","handleNodeDoubleClick","handleEditFinish","map","children","style","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","color","position","width","height","border","overflow","onMouseMove","onMouseUp","pointerEvents","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","isDraggingNode","scale","padding","background","borderRadius","cursor","userSelect","transform","transformOrigin","onMouseDown","onDoubleClick","type","value","onChange","onBlur","onKeyDown","key","autoFocus","ref","viewBox","fill","d","mindmapId","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport ThankButton from './ThankButton';\r\n\r\n/**\r\n * MindmapCanvas.js\r\n * \r\n * キャンバス上でノードを自由配置・編集するコンポーネント\r\n * 追加機能:\r\n * - ノード追加、エッジ追加モードは既存実装\r\n * - ゴミ箱アイコンによるドラッグ＆ドロップでの削除機能\r\n * - ノードのダブルクリックでインライン文字編集\r\n */\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n  const [editingNodeId, setEditingNodeId] = useState(null);\r\n  const [editingText, setEditingText] = useState('');\r\n\r\n  // ゴミ箱のhover状態\r\n  const [trashHovered, setTrashHovered] = useState(false);\r\n  const trashRef = useRef(null);\r\n\r\n  // ドラッグ開始（エッジ追加モードの場合は無効）\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode) return;\r\n    // ダブルクリックなどで編集中は処理しない\r\n    if (editingNodeId) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  // ドラッグ中\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const containerRect = e.currentTarget.getBoundingClientRect();\r\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n\r\n    // ゴミ箱との重なり判定\r\n    if (trashRef.current) {\r\n      const trashRect = trashRef.current.getBoundingClientRect();\r\n      // ノードの中心位置（仮にノードサイズは約100×40）\r\n      const nodeCenterX = newX + 50;\r\n      const nodeCenterY = newY + 20;\r\n      if (\r\n        nodeCenterX >= trashRect.left &&\r\n        nodeCenterX <= trashRect.right &&\r\n        nodeCenterY >= trashRect.top &&\r\n        nodeCenterY <= trashRect.bottom\r\n      ) {\r\n        setTrashHovered(true);\r\n      } else {\r\n        setTrashHovered(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ドラッグ終了：削除判定を実施\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      // ゴミ箱上でドロップされた場合、対象ノードを削除\r\n      if (trashHovered) {\r\n        const newNodes = mindmap.nodes.filter((_, idx) => idx !== dragging.nodeIndex);\r\n        setMindmap({ ...mindmap, nodes: newNodes });\r\n      }\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n      setTrashHovered(false);\r\n    }\r\n  };\r\n\r\n  // ノード追加機能\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200\r\n    };\r\n    setMindmap({ \r\n      ...mindmap, \r\n      nodes: [...mindmap.nodes, newNode]\r\n    });\r\n  };\r\n\r\n  // ノードクリック時の処理（エッジ追加モード）\r\n  const handleNodeClick = (node, index) => {\r\n    if (isEdgeMode) {\r\n      if (!edgeStart) {\r\n        setEdgeStart(node.nodeId);\r\n      } else {\r\n        if (edgeStart === node.nodeId) {\r\n          setEdgeStart(null);\r\n        } else {\r\n          const newEdge = {\r\n            id: `edge_${Date.now()}`,\r\n            from: edgeStart,\r\n            to: node.nodeId\r\n          };\r\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n          setMindmap({ ...mindmap, edges: newEdges });\r\n          setEdgeStart(null);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // エッジ削除：線クリック時に確認\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  // ヘルパー：nodeId からノード情報を取得\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\r\n  };\r\n\r\n  // ノードのダブルクリックで文字編集を開始\r\n  const handleNodeDoubleClick = (node) => {\r\n    if (isEdgeMode) return;\r\n    setEditingNodeId(node.nodeId);\r\n    setEditingText(node.text);\r\n  };\r\n\r\n  // 編集完了時の処理\r\n  const handleEditFinish = (nodeId) => {\r\n    const newNodes = mindmap.nodes.map(node => {\r\n      if (node.nodeId === nodeId) {\r\n        return { ...node, text: editingText };\r\n      }\r\n      return node;\r\n    });\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n    setEditingNodeId(null);\r\n    setEditingText('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 操作用のボタン群 */}\r\n      <div style={{ marginBottom: 10 }}>\r\n        <button onClick={addNode}>ノード追加</button>\r\n        <button \r\n          onClick={() => {\r\n            setIsEdgeMode(!isEdgeMode);\r\n            setEdgeStart(null);\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {isEdgeMode && (\r\n          <span style={{ marginLeft: 10, color: 'blue' }}>\r\n            {edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'}\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      {/* キャンバス領域 */}\r\n      <div \r\n        style={{ \r\n          position: 'relative', \r\n          width: '100%', \r\n          height: '500px', \r\n          border: '1px solid #777',\r\n          overflow: 'hidden'\r\n        }}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* SVGレイヤー：ノード間の線（エッジ）を描画 */}\r\n        <svg \r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: 'none'\r\n          }}\r\n        >\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + 50}\r\n                y1={fromNode.y + 20}\r\n                x2={toNode.x + 50}\r\n                y2={toNode.y + 20}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n        {/* ノード描画 */}\r\n        {mindmap.nodes.map((node, idx) => {\r\n          // ドラッグ中のノードは大きく表示（scale 1.1）、ただしゴミ箱上なら元のサイズ\r\n          const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\r\n          const scale = isDraggingNode ? (trashHovered ? 1.0 : 1.1) : 1.0;\r\n          return (\r\n            <div\r\n              key={node.nodeId}\r\n              style={{\r\n                position: 'absolute',\r\n                left: node.x,\r\n                top: node.y,\r\n                padding: '8px 12px',\r\n                background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\r\n                border: '1px solid #333',\r\n                borderRadius: '4px',\r\n                cursor: isEdgeMode ? 'pointer' : 'move',\r\n                userSelect: 'none',\r\n                transform: `scale(${scale})`,\r\n                transformOrigin: 'center'\r\n              }}\r\n              onMouseDown={(e) => handleDragStart(e, idx)}\r\n              onClick={() => handleNodeClick(node, idx)}\r\n              onDoubleClick={() => handleNodeDoubleClick(node)}\r\n            >\r\n              {editingNodeId === node.nodeId ? (\r\n                <input\r\n                  type=\"text\"\r\n                  value={editingText}\r\n                  onChange={(e) => setEditingText(e.target.value)}\r\n                  onBlur={() => handleEditFinish(node.nodeId)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter') handleEditFinish(node.nodeId);\r\n                  }}\r\n                  autoFocus\r\n                />\r\n              ) : (\r\n                node.text\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n        {/* ゴミ箱アイコン：キャンバス下部中央に絶対配置 */}\r\n        <div \r\n          ref={trashRef}\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: 20,\r\n            left: '50%',\r\n            transform: 'translateX(-50%)',\r\n            pointerEvents: 'none'\r\n          }}\r\n        >\r\n          <svg \r\n            width={trashHovered ? 50 : 30}\r\n            height={trashHovered ? 50 : 30}\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"red\"\r\n          >\r\n            <path d=\"M3 6h18v2H3zm2 3h14l-1.5 12.5a2 2 0 01-2 1.5H8.5a2 2 0 01-2-1.5L5 9zm5 2v9h2v-9H10zm4 0v9h2v-9h-2zM9 4V2h6v2h5v2H4V4z\"/>\r\n          </svg>\r\n        </div>\r\n        {/* キャンバス下部に「ありがとう」ボタンを配置 */}\r\n        <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n          <ThankButton mindmapId={mindmap.id} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}