{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { marked } from 'marked';\nimport ThankButton from './ThankButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_NODE_WIDTH = 150;\nconst DEFAULT_NODE_HEIGHT = 80;\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n  const [editingNodeId, setEditingNodeId] = useState(null);\n  const [editingText, setEditingText] = useState('');\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\n\n  // ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\n  // ※編集中のノードの場合はサイズ更新しない（scale の影響を受けないように）\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\n    const newWidth = el.offsetWidth / scaleFactor;\n    const newHeight = el.offsetHeight / scaleFactor;\n    const currentNode = mindmap.nodes[index];\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\n      const newNodes = [...mindmap.nodes];\n      newNodes[index] = {\n        ...newNodes[index],\n        width: newWidth,\n        height: newHeight\n      };\n      setMindmap({\n        ...mindmap,\n        nodes: newNodes\n      });\n    }\n  };\n\n  // ドラッグ開始（エッジ追加モードまたは編集中は無効）\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode) return;\n    if (editingNodeId) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const container = e.currentTarget;\n    const containerRect = container.getBoundingClientRect();\n    const scrollLeft = container.scrollLeft;\n    const scrollTop = container.scrollTop;\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n    }\n  };\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200,\n      width: DEFAULT_NODE_WIDTH,\n      height: DEFAULT_NODE_HEIGHT\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n  const handleNodeClick = (node, index) => {\n    if (isEdgeMode) {\n      if (!edgeStart) {\n        setEdgeStart(node.nodeId);\n      } else {\n        if (edgeStart === node.nodeId) {\n          setEdgeStart(null);\n        } else {\n          const newEdge = {\n            id: `edge_${Date.now()}`,\n            from: edgeStart,\n            to: node.nodeId\n          };\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n          setMindmap({\n            ...mindmap,\n            edges: newEdges\n          });\n          setEdgeStart(null);\n        }\n      }\n    }\n  };\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\n  };\n\n  // ノードをダブルクリックで Markdown 編集モードに切替\n  const handleNodeDoubleClick = node => {\n    if (isEdgeMode) return;\n    setEditingNodeId(node.nodeId);\n    setEditingText(node.text);\n  };\n\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で編集完了し Markdown を保存\n  const handleEditFinish = nodeId => {\n    const newNodes = mindmap.nodes.map(node => {\n      if (node.nodeId === nodeId) {\n        return {\n          ...node,\n          text: editingText\n        };\n      }\n      return node;\n    });\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n    setEditingNodeId(null);\n    setEditingText('');\n  };\n\n  // ノード削除\n  const handleDeleteNode = (index, e) => {\n    e.stopPropagation(); // ノード自体のクリックイベントと重ならないように\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEdgeMode(!isEdgeMode);\n          setEdgeStart(null);\n        },\n        style: {\n          marginLeft: 10\n        },\n        children: isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), isEdgeMode && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 10,\n          color: 'blue'\n        },\n        children: edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '500px',\n        border: '1px solid #777',\n        overflow: 'auto'\n      },\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none',\n          overflow: 'hidden'\n        },\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y1: fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            x2: toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y2: toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => {\n        // 編集中のノードは scale 常に 1.0、ドラッグ中は 1.1\n        const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\n        const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: node.x,\n            top: node.y,\n            width: node.width || DEFAULT_NODE_WIDTH,\n            height: node.height || DEFAULT_NODE_HEIGHT,\n            padding: '8px 12px',\n            background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\n            border: '1px solid #333',\n            borderRadius: '4px',\n            cursor: isEdgeMode ? 'pointer' : 'move',\n            userSelect: 'none',\n            transform: `scale(${scale})`,\n            transformOrigin: 'center',\n            resize: 'both',\n            overflow: 'hidden',\n            whiteSpace: 'pre-wrap',\n            position: 'absolute'\n          },\n          onMouseDown: e => handleDragStart(e, idx),\n          onClick: () => handleNodeClick(node, idx),\n          onDoubleClick: () => handleNodeDoubleClick(node),\n          onMouseUp: e => {\n            if (editingNodeId !== node.nodeId) {\n              handleNodeResize(idx, e.currentTarget, scale);\n            }\n          },\n          onMouseEnter: () => setHoveredNodeId(node.nodeId),\n          onMouseLeave: () => setHoveredNodeId(null),\n          children: [hoveredNodeId === node.nodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => handleDeleteNode(idx, e),\n            style: {\n              position: 'absolute',\n              top: 2,\n              right: 2,\n              cursor: 'pointer',\n              fontWeight: 'bold',\n              color: 'red',\n              background: 'rgba(255,255,255,0.7)',\n              borderRadius: '50%',\n              width: 20,\n              height: 20,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              zIndex: 1\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this), editingNodeId === node.nodeId ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editingText,\n            onChange: e => setEditingText(e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleEditFinish(node.nodeId);\n              }\n            },\n            autoFocus: true,\n            style: {\n              width: '100%',\n              height: '100%',\n              resize: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden'\n            },\n            dangerouslySetInnerHTML: {\n              __html: marked.parse(node.text, {\n                breaks: true\n              })\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)]\n        }, node.nodeId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"1SYppGudLolqPJcu1FC1z1xMcfA=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","marked","ThankButton","jsxDEV","_jsxDEV","DEFAULT_NODE_WIDTH","DEFAULT_NODE_HEIGHT","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","editingNodeId","setEditingNodeId","editingText","setEditingText","hoveredNodeId","setHoveredNodeId","handleNodeResize","index","el","scaleFactor","nodes","nodeId","newWidth","offsetWidth","newHeight","offsetHeight","currentNode","width","height","newNodes","handleDragStart","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","container","currentTarget","containerRect","scrollLeft","scrollTop","newX","newY","x","y","handleMouseUp","addNode","newNodeId","Date","now","newNode","text","Math","random","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","filter","edge","getNodeById","find","n","handleNodeDoubleClick","handleEditFinish","map","handleDeleteNode","_","idx","children","style","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","color","position","border","overflow","onMouseMove","onMouseUp","pointerEvents","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","isDraggingNode","scale","padding","background","borderRadius","cursor","userSelect","transform","transformOrigin","resize","whiteSpace","onMouseDown","onDoubleClick","onMouseEnter","onMouseLeave","right","fontWeight","display","alignItems","justifyContent","zIndex","value","onChange","onKeyDown","key","shiftKey","preventDefault","autoFocus","dangerouslySetInnerHTML","__html","parse","breaks","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { marked } from 'marked';\r\nimport ThankButton from './ThankButton';\r\n\r\nconst DEFAULT_NODE_WIDTH = 150;\r\nconst DEFAULT_NODE_HEIGHT = 80;\r\n\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n  const [editingNodeId, setEditingNodeId] = useState(null);\r\n  const [editingText, setEditingText] = useState('');\r\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\r\n\r\n  // ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\r\n  // ※編集中のノードの場合はサイズ更新しない（scale の影響を受けないように）\r\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\r\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\r\n    const newWidth = el.offsetWidth / scaleFactor;\r\n    const newHeight = el.offsetHeight / scaleFactor;\r\n    const currentNode = mindmap.nodes[index];\r\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\r\n      const newNodes = [...mindmap.nodes];\r\n      newNodes[index] = { ...newNodes[index], width: newWidth, height: newHeight };\r\n      setMindmap({ ...mindmap, nodes: newNodes });\r\n    }\r\n  };\r\n\r\n  // ドラッグ開始（エッジ追加モードまたは編集中は無効）\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode) return;\r\n    if (editingNodeId) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const container = e.currentTarget;\r\n    const containerRect = container.getBoundingClientRect();\r\n    const scrollLeft = container.scrollLeft;\r\n    const scrollTop = container.scrollTop;\r\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n    }\r\n  };\r\n\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200,\r\n      width: DEFAULT_NODE_WIDTH,\r\n      height: DEFAULT_NODE_HEIGHT\r\n    };\r\n    setMindmap({ ...mindmap, nodes: [...mindmap.nodes, newNode] });\r\n  };\r\n\r\n  const handleNodeClick = (node, index) => {\r\n    if (isEdgeMode) {\r\n      if (!edgeStart) {\r\n        setEdgeStart(node.nodeId);\r\n      } else {\r\n        if (edgeStart === node.nodeId) {\r\n          setEdgeStart(null);\r\n        } else {\r\n          const newEdge = {\r\n            id: `edge_${Date.now()}`,\r\n            from: edgeStart,\r\n            to: node.nodeId\r\n          };\r\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n          setMindmap({ ...mindmap, edges: newEdges });\r\n          setEdgeStart(null);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\r\n  };\r\n\r\n  // ノードをダブルクリックで Markdown 編集モードに切替\r\n  const handleNodeDoubleClick = (node) => {\r\n    if (isEdgeMode) return;\r\n    setEditingNodeId(node.nodeId);\r\n    setEditingText(node.text);\r\n  };\r\n\r\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で編集完了し Markdown を保存\r\n  const handleEditFinish = (nodeId) => {\r\n    const newNodes = mindmap.nodes.map(node => {\r\n      if (node.nodeId === nodeId) {\r\n        return { ...node, text: editingText };\r\n      }\r\n      return node;\r\n    });\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n    setEditingNodeId(null);\r\n    setEditingText('');\r\n  };\r\n\r\n  // ノード削除\r\n  const handleDeleteNode = (index, e) => {\r\n    e.stopPropagation(); // ノード自体のクリックイベントと重ならないように\r\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 操作用ボタン群 */}\r\n      <div style={{ marginBottom: 10 }}>\r\n        <button onClick={addNode}>ノード追加</button>\r\n        <button\r\n          onClick={() => {\r\n            setIsEdgeMode(!isEdgeMode);\r\n            setEdgeStart(null);\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {isEdgeMode && (\r\n          <span style={{ marginLeft: 10, color: 'blue' }}>\r\n            {edgeStart\r\n              ? `開始ノード: ${edgeStart} - 終了ノードを選択`\r\n              : 'ノードを選択してエッジ開始'}\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      {/* キャンバス領域 */}\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '500px',\r\n          border: '1px solid #777',\r\n          overflow: 'auto'\r\n        }}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* SVG レイヤー：エッジ描画 */}\r\n        <svg\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: 'none',\r\n            overflow: 'hidden'\r\n          }}\r\n        >\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y1={fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                x2={toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y2={toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n        {mindmap.nodes.map((node, idx) => {\r\n          // 編集中のノードは scale 常に 1.0、ドラッグ中は 1.1\r\n          const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\r\n          const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\r\n          return (\r\n            <div\r\n              key={node.nodeId}\r\n              style={{\r\n                position: 'absolute',\r\n                left: node.x,\r\n                top: node.y,\r\n                width: node.width || DEFAULT_NODE_WIDTH,\r\n                height: node.height || DEFAULT_NODE_HEIGHT,\r\n                padding: '8px 12px',\r\n                background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\r\n                border: '1px solid #333',\r\n                borderRadius: '4px',\r\n                cursor: isEdgeMode ? 'pointer' : 'move',\r\n                userSelect: 'none',\r\n                transform: `scale(${scale})`,\r\n                transformOrigin: 'center',\r\n                resize: 'both',\r\n                overflow: 'hidden',\r\n                whiteSpace: 'pre-wrap',\r\n                position: 'absolute'\r\n              }}\r\n              onMouseDown={(e) => handleDragStart(e, idx)}\r\n              onClick={() => handleNodeClick(node, idx)}\r\n              onDoubleClick={() => handleNodeDoubleClick(node)}\r\n              onMouseUp={(e) => {\r\n                if (editingNodeId !== node.nodeId) {\r\n                  handleNodeResize(idx, e.currentTarget, scale);\r\n                }\r\n              }}\r\n              onMouseEnter={() => setHoveredNodeId(node.nodeId)}\r\n              onMouseLeave={() => setHoveredNodeId(null)}\r\n            >\r\n              {/* 削除用のバツ印（ホバー時のみ表示） */}\r\n              {hoveredNodeId === node.nodeId && (\r\n                <div\r\n                  onClick={(e) => handleDeleteNode(idx, e)}\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: 2,\r\n                    right: 2,\r\n                    cursor: 'pointer',\r\n                    fontWeight: 'bold',\r\n                    color: 'red',\r\n                    background: 'rgba(255,255,255,0.7)',\r\n                    borderRadius: '50%',\r\n                    width: 20,\r\n                    height: 20,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1\r\n                  }}\r\n                >\r\n                  ×\r\n                </div>\r\n              )}\r\n              {editingNodeId === node.nodeId ? (\r\n                <textarea\r\n                  value={editingText}\r\n                  onChange={(e) => setEditingText(e.target.value)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                      e.preventDefault();\r\n                      handleEditFinish(node.nodeId);\r\n                    }\r\n                  }}\r\n                  autoFocus\r\n                  style={{ width: '100%', height: '100%', resize: 'none' }}\r\n                />\r\n              ) : (\r\n                <div\r\n                  style={{ width: '100%', height: '100%', overflow: 'hidden' }}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: marked.parse(node.text, { breaks: true })\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}