{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { marked } from 'marked';\nimport ThankButton from './ThankButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_NODE_WIDTH = 150;\nconst DEFAULT_NODE_HEIGHT = 80;\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n  const [editingNodeId, setEditingNodeId] = useState(null);\n  const [editingText, setEditingText] = useState('');\n  const [trashHovered, setTrashHovered] = useState(false);\n  const trashRef = useRef(null);\n\n  // ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\n  // ※編集中のノードの場合はサイズ更新しない（scale の影響を受けないように）\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\n    const newWidth = el.offsetWidth / scaleFactor;\n    const newHeight = el.offsetHeight / scaleFactor;\n    const currentNode = mindmap.nodes[index];\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\n      const newNodes = [...mindmap.nodes];\n      newNodes[index] = {\n        ...newNodes[index],\n        width: newWidth,\n        height: newHeight\n      };\n      setMindmap({\n        ...mindmap,\n        nodes: newNodes\n      });\n    }\n  };\n\n  // ドラッグ開始（エッジ追加モードまたは編集中は無効）\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode) return;\n    if (editingNodeId) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const container = e.currentTarget;\n    const containerRect = container.getBoundingClientRect();\n    const scrollLeft = container.scrollLeft;\n    const scrollTop = container.scrollTop;\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n\n    // ゴミ箱との重なり判定\n    if (trashRef.current) {\n      const trashRect = trashRef.current.getBoundingClientRect();\n      const nodeCenterX = newX + (newNodes[dragging.nodeIndex].width || DEFAULT_NODE_WIDTH) / 2;\n      const nodeCenterY = newY + (newNodes[dragging.nodeIndex].height || DEFAULT_NODE_HEIGHT) / 2;\n      if (nodeCenterX >= trashRect.left && nodeCenterX <= trashRect.right && nodeCenterY >= trashRect.top && nodeCenterY <= trashRect.bottom) {\n        setTrashHovered(true);\n      } else {\n        setTrashHovered(false);\n      }\n    }\n  };\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      if (trashHovered) {\n        const newNodes = mindmap.nodes.filter((_, idx) => idx !== dragging.nodeIndex);\n        setMindmap({\n          ...mindmap,\n          nodes: newNodes\n        });\n      }\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n      setTrashHovered(false);\n    }\n  };\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200,\n      width: DEFAULT_NODE_WIDTH,\n      height: DEFAULT_NODE_HEIGHT\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n  const handleNodeClick = (node, index) => {\n    if (isEdgeMode) {\n      if (!edgeStart) {\n        setEdgeStart(node.nodeId);\n      } else {\n        if (edgeStart === node.nodeId) {\n          setEdgeStart(null);\n        } else {\n          const newEdge = {\n            id: `edge_${Date.now()}`,\n            from: edgeStart,\n            to: node.nodeId\n          };\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n          setMindmap({\n            ...mindmap,\n            edges: newEdges\n          });\n          setEdgeStart(null);\n        }\n      }\n    }\n  };\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\n  };\n\n  // ノードをダブルクリックで Markdown 編集モードに切替\n  const handleNodeDoubleClick = node => {\n    if (isEdgeMode) return;\n    setEditingNodeId(node.nodeId);\n    setEditingText(node.text);\n  };\n\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で編集完了し Markdown を保存\n  const handleEditFinish = nodeId => {\n    const newNodes = mindmap.nodes.map(node => {\n      if (node.nodeId === nodeId) {\n        return {\n          ...node,\n          text: editingText\n        };\n      }\n      return node;\n    });\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n    setEditingNodeId(null);\n    setEditingText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEdgeMode(!isEdgeMode);\n          setEdgeStart(null);\n        },\n        style: {\n          marginLeft: 10\n        },\n        children: isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), isEdgeMode && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 10,\n          color: 'blue'\n        },\n        children: edgeStart ? `開始ノード: ${edgeStart} - 終了ノードを選択` : 'ノードを選択してエッジ開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '500px',\n        border: '1px solid #777',\n        overflow: 'auto'\n      },\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none',\n          overflow: 'hidden'\n        },\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y1: fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            x2: toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y2: toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => {\n        // 編集中のノードは scale 常に 1.0、ドラッグ中は 1.1（ゴミ箱に重なっている場合は 1.0）\n        const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\n        const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? trashHovered ? 1.0 : 1.1 : 1.0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: node.x,\n            top: node.y,\n            width: node.width || DEFAULT_NODE_WIDTH,\n            height: node.height || DEFAULT_NODE_HEIGHT,\n            padding: '8px 12px',\n            background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\n            border: '1px solid #333',\n            borderRadius: '4px',\n            cursor: isEdgeMode ? 'pointer' : 'move',\n            userSelect: 'none',\n            transform: `scale(${scale})`,\n            transformOrigin: 'center',\n            resize: 'both',\n            overflow: 'hidden',\n            whiteSpace: 'pre-wrap'\n          },\n          onMouseDown: e => handleDragStart(e, idx),\n          onClick: () => handleNodeClick(node, idx),\n          onDoubleClick: () => handleNodeDoubleClick(node),\n          onMouseUp: e => {\n            if (editingNodeId !== node.nodeId) {\n              handleNodeResize(idx, e.currentTarget, scale);\n            }\n          },\n          children: editingNodeId === node.nodeId ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editingText,\n            onChange: e => setEditingText(e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleEditFinish(node.nodeId);\n              }\n            },\n            autoFocus: true,\n            style: {\n              width: '100%',\n              height: '100%',\n              resize: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden'\n            },\n            dangerouslySetInnerHTML: {\n              __html: marked.parse(node.text, {\n                breaks: true\n              })\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this)\n        }, node.nodeId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: trashRef,\n      style: {\n        position: 'absolute',\n        bottom: 20,\n        left: '50%',\n        transform: 'translateX(-50%)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: trashHovered ? 50 : 30,\n        height: trashHovered ? 50 : 30,\n        viewBox: \"0 0 24 24\",\n        fill: \"red\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M3 6h18v2H3zm2 3h14l-1.5 12.5a2 2 0 01-2 1.5H8.5a2 2 0 01-2-1.5L5 9zm5 2v9h2v-9H10zm4 0v9h2v-9h-2zM9 4V2h6v2h5v2H4V4z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"YBpnmEM26ts8ylxLfrdp8/88HZA=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","useRef","marked","ThankButton","jsxDEV","_jsxDEV","DEFAULT_NODE_WIDTH","DEFAULT_NODE_HEIGHT","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","editingNodeId","setEditingNodeId","editingText","setEditingText","trashHovered","setTrashHovered","trashRef","handleNodeResize","index","el","scaleFactor","nodes","nodeId","newWidth","offsetWidth","newHeight","offsetHeight","currentNode","width","height","newNodes","handleDragStart","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","container","currentTarget","containerRect","scrollLeft","scrollTop","newX","newY","x","y","current","trashRect","nodeCenterX","nodeCenterY","right","bottom","handleMouseUp","filter","_","idx","addNode","newNodeId","Date","now","newNode","text","Math","random","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","edge","getNodeById","find","n","handleNodeDoubleClick","handleEditFinish","map","children","style","marginBottom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","color","position","border","overflow","onMouseMove","onMouseUp","pointerEvents","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","isDraggingNode","scale","padding","background","borderRadius","cursor","userSelect","transform","transformOrigin","resize","whiteSpace","onMouseDown","onDoubleClick","value","onChange","onKeyDown","key","shiftKey","preventDefault","autoFocus","dangerouslySetInnerHTML","__html","parse","breaks","ref","viewBox","fill","d","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { marked } from 'marked';\r\nimport ThankButton from './ThankButton';\r\n\r\nconst DEFAULT_NODE_WIDTH = 150;\r\nconst DEFAULT_NODE_HEIGHT = 80;\r\n\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n  const [editingNodeId, setEditingNodeId] = useState(null);\r\n  const [editingText, setEditingText] = useState('');\r\n  const [trashHovered, setTrashHovered] = useState(false);\r\n  const trashRef = useRef(null);\r\n\r\n  // ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\r\n  // ※編集中のノードの場合はサイズ更新しない（scale の影響を受けないように）\r\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\r\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\r\n    const newWidth = el.offsetWidth / scaleFactor;\r\n    const newHeight = el.offsetHeight / scaleFactor;\r\n    const currentNode = mindmap.nodes[index];\r\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\r\n      const newNodes = [...mindmap.nodes];\r\n      newNodes[index] = { ...newNodes[index], width: newWidth, height: newHeight };\r\n      setMindmap({ ...mindmap, nodes: newNodes });\r\n    }\r\n  };\r\n\r\n  // ドラッグ開始（エッジ追加モードまたは編集中は無効）\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode) return;\r\n    if (editingNodeId) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const container = e.currentTarget;\r\n    const containerRect = container.getBoundingClientRect();\r\n    const scrollLeft = container.scrollLeft;\r\n    const scrollTop = container.scrollTop;\r\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n\r\n    // ゴミ箱との重なり判定\r\n    if (trashRef.current) {\r\n      const trashRect = trashRef.current.getBoundingClientRect();\r\n      const nodeCenterX = newX + (newNodes[dragging.nodeIndex].width || DEFAULT_NODE_WIDTH) / 2;\r\n      const nodeCenterY = newY + (newNodes[dragging.nodeIndex].height || DEFAULT_NODE_HEIGHT) / 2;\r\n      if (\r\n        nodeCenterX >= trashRect.left &&\r\n        nodeCenterX <= trashRect.right &&\r\n        nodeCenterY >= trashRect.top &&\r\n        nodeCenterY <= trashRect.bottom\r\n      ) {\r\n        setTrashHovered(true);\r\n      } else {\r\n        setTrashHovered(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      if (trashHovered) {\r\n        const newNodes = mindmap.nodes.filter((_, idx) => idx !== dragging.nodeIndex);\r\n        setMindmap({ ...mindmap, nodes: newNodes });\r\n      }\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n      setTrashHovered(false);\r\n    }\r\n  };\r\n\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200,\r\n      width: DEFAULT_NODE_WIDTH,\r\n      height: DEFAULT_NODE_HEIGHT\r\n    };\r\n    setMindmap({ ...mindmap, nodes: [...mindmap.nodes, newNode] });\r\n  };\r\n\r\n  const handleNodeClick = (node, index) => {\r\n    if (isEdgeMode) {\r\n      if (!edgeStart) {\r\n        setEdgeStart(node.nodeId);\r\n      } else {\r\n        if (edgeStart === node.nodeId) {\r\n          setEdgeStart(null);\r\n        } else {\r\n          const newEdge = {\r\n            id: `edge_${Date.now()}`,\r\n            from: edgeStart,\r\n            to: node.nodeId\r\n          };\r\n          const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n          setMindmap({ ...mindmap, edges: newEdges });\r\n          setEdgeStart(null);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\r\n  };\r\n\r\n  // ノードをダブルクリックで Markdown 編集モードに切替\r\n  const handleNodeDoubleClick = (node) => {\r\n    if (isEdgeMode) return;\r\n    setEditingNodeId(node.nodeId);\r\n    setEditingText(node.text);\r\n  };\r\n\r\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で編集完了し Markdown を保存\r\n  const handleEditFinish = (nodeId) => {\r\n    const newNodes = mindmap.nodes.map(node => {\r\n      if (node.nodeId === nodeId) {\r\n        return { ...node, text: editingText };\r\n      }\r\n      return node;\r\n    });\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n    setEditingNodeId(null);\r\n    setEditingText('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 操作用ボタン群 */}\r\n      <div style={{ marginBottom: 10 }}>\r\n        <button onClick={addNode}>ノード追加</button>\r\n        <button\r\n          onClick={() => {\r\n            setIsEdgeMode(!isEdgeMode);\r\n            setEdgeStart(null);\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {isEdgeMode && (\r\n          <span style={{ marginLeft: 10, color: 'blue' }}>\r\n            {edgeStart\r\n              ? `開始ノード: ${edgeStart} - 終了ノードを選択`\r\n              : 'ノードを選択してエッジ開始'}\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      {/* キャンバス領域 */}\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '500px',\r\n          border: '1px solid #777',\r\n          overflow: 'auto'\r\n        }}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* SVG レイヤー：エッジ描画 */}\r\n        <svg\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: 'none',\r\n            overflow: 'hidden'\r\n          }}\r\n        >\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y1={fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                x2={toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y2={toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                stroke=\"black\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n        {mindmap.nodes.map((node, idx) => {\r\n          // 編集中のノードは scale 常に 1.0、ドラッグ中は 1.1（ゴミ箱に重なっている場合は 1.0）\r\n          const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\r\n          const scale =\r\n            editingNodeId === node.nodeId\r\n              ? 1.0\r\n              : isDraggingNode\r\n              ? trashHovered\r\n                ? 1.0\r\n                : 1.1\r\n              : 1.0;\r\n          return (\r\n            <div\r\n              key={node.nodeId}\r\n              style={{\r\n                position: 'absolute',\r\n                left: node.x,\r\n                top: node.y,\r\n                width: node.width || DEFAULT_NODE_WIDTH,\r\n                height: node.height || DEFAULT_NODE_HEIGHT,\r\n                padding: '8px 12px',\r\n                background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\r\n                border: '1px solid #333',\r\n                borderRadius: '4px',\r\n                cursor: isEdgeMode ? 'pointer' : 'move',\r\n                userSelect: 'none',\r\n                transform: `scale(${scale})`,\r\n                transformOrigin: 'center',\r\n                resize: 'both',\r\n                overflow: 'hidden',\r\n                whiteSpace: 'pre-wrap'\r\n              }}\r\n              onMouseDown={(e) => handleDragStart(e, idx)}\r\n              onClick={() => handleNodeClick(node, idx)}\r\n              onDoubleClick={() => handleNodeDoubleClick(node)}\r\n              onMouseUp={(e) => {\r\n                if (editingNodeId !== node.nodeId) {\r\n                  handleNodeResize(idx, e.currentTarget, scale);\r\n                }\r\n              }}\r\n            >\r\n              {editingNodeId === node.nodeId ? (\r\n                <textarea\r\n                  value={editingText}\r\n                  onChange={(e) => setEditingText(e.target.value)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                      e.preventDefault();\r\n                      handleEditFinish(node.nodeId);\r\n                    }\r\n                  }}\r\n                  autoFocus\r\n                  style={{ width: '100%', height: '100%', resize: 'none' }}\r\n                />\r\n              ) : (\r\n                <div\r\n                  style={{ width: '100%', height: '100%', overflow: 'hidden' }}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: marked.parse(node.text, { breaks: true })\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div\r\n        ref={trashRef}\r\n        style={{\r\n          position: 'absolute',\r\n          bottom: 20,\r\n          left: '50%',\r\n          transform: 'translateX(-50%)'\r\n        }}\r\n      >\r\n        <svg\r\n          width={trashHovered ? 50 : 30}\r\n          height={trashHovered ? 50 : 30}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"red\"\r\n        >\r\n          <path d=\"M3 6h18v2H3zm2 3h14l-1.5 12.5a2 2 0 01-2 1.5H8.5a2 2 0 01-2-1.5L5 9zm5 2v9h2v-9H10zm4 0v9h2v-9h-2zM9 4V2h6v2h5v2H4V4z\" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,kBAAkB,GAAG,GAAG;AAC9B,MAAMC,mBAAmB,GAAG,EAAE;AAE9B,SAASC,aAAaA,CAAC;EAAEC,OAAO;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACvCc,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM4B,QAAQ,GAAG3B,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA;EACA,MAAM4B,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,EAAE,EAAEC,WAAW,GAAG,GAAG,KAAK;IACzD,IAAIV,aAAa,KAAKb,OAAO,CAACwB,KAAK,CAACH,KAAK,CAAC,CAACI,MAAM,EAAE;IACnD,MAAMC,QAAQ,GAAGJ,EAAE,CAACK,WAAW,GAAGJ,WAAW;IAC7C,MAAMK,SAAS,GAAGN,EAAE,CAACO,YAAY,GAAGN,WAAW;IAC/C,MAAMO,WAAW,GAAG9B,OAAO,CAACwB,KAAK,CAACH,KAAK,CAAC;IACxC,IAAIS,WAAW,CAACC,KAAK,KAAKL,QAAQ,IAAII,WAAW,CAACE,MAAM,KAAKJ,SAAS,EAAE;MACtE,MAAMK,QAAQ,GAAG,CAAC,GAAGjC,OAAO,CAACwB,KAAK,CAAC;MACnCS,QAAQ,CAACZ,KAAK,CAAC,GAAG;QAAE,GAAGY,QAAQ,CAACZ,KAAK,CAAC;QAAEU,KAAK,EAAEL,QAAQ;QAAEM,MAAM,EAAEJ;MAAU,CAAC;MAC5E3B,UAAU,CAAC;QAAE,GAAGD,OAAO;QAAEwB,KAAK,EAAES;MAAS,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAACC,CAAC,EAAEd,KAAK,KAAK;IACpC,IAAIZ,UAAU,EAAE;IAChB,IAAII,aAAa,EAAE;IACnB,MAAMuB,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,qBAAqB,CAAC,CAAC;IAC7C,MAAM/B,OAAO,GAAG4B,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;IACrC,MAAMhC,OAAO,GAAG2B,CAAC,CAACM,OAAO,GAAGL,IAAI,CAACM,GAAG;IACpCtC,WAAW,CAAC;MAAEC,UAAU,EAAE,IAAI;MAAEC,SAAS,EAAEe,KAAK;MAAEd,OAAO;MAAEC;IAAQ,CAAC,CAAC;EACvE,CAAC;EAED,MAAMmC,eAAe,GAAIR,CAAC,IAAK;IAC7B,IAAI,CAAChC,QAAQ,CAACE,UAAU,EAAE;IAC1B,MAAMuC,SAAS,GAAGT,CAAC,CAACU,aAAa;IACjC,MAAMC,aAAa,GAAGF,SAAS,CAACN,qBAAqB,CAAC,CAAC;IACvD,MAAMS,UAAU,GAAGH,SAAS,CAACG,UAAU;IACvC,MAAMC,SAAS,GAAGJ,SAAS,CAACI,SAAS;IACrC,MAAMC,IAAI,GAAGd,CAAC,CAACI,OAAO,GAAGO,aAAa,CAACN,IAAI,GAAGO,UAAU,GAAG5C,QAAQ,CAACI,OAAO;IAC3E,MAAM2C,IAAI,GAAGf,CAAC,CAACM,OAAO,GAAGK,aAAa,CAACJ,GAAG,GAAGM,SAAS,GAAG7C,QAAQ,CAACK,OAAO;IACzE,MAAMyB,QAAQ,GAAG,CAAC,GAAGjC,OAAO,CAACwB,KAAK,CAAC;IACnCS,QAAQ,CAAC9B,QAAQ,CAACG,SAAS,CAAC,GAAG;MAAE,GAAG2B,QAAQ,CAAC9B,QAAQ,CAACG,SAAS,CAAC;MAAE6C,CAAC,EAAEF,IAAI;MAAEG,CAAC,EAAEF;IAAK,CAAC;IACpFjD,UAAU,CAAC;MAAE,GAAGD,OAAO;MAAEwB,KAAK,EAAES;IAAS,CAAC,CAAC;;IAE3C;IACA,IAAId,QAAQ,CAACkC,OAAO,EAAE;MACpB,MAAMC,SAAS,GAAGnC,QAAQ,CAACkC,OAAO,CAACf,qBAAqB,CAAC,CAAC;MAC1D,MAAMiB,WAAW,GAAGN,IAAI,GAAG,CAAChB,QAAQ,CAAC9B,QAAQ,CAACG,SAAS,CAAC,CAACyB,KAAK,IAAIlC,kBAAkB,IAAI,CAAC;MACzF,MAAM2D,WAAW,GAAGN,IAAI,GAAG,CAACjB,QAAQ,CAAC9B,QAAQ,CAACG,SAAS,CAAC,CAAC0B,MAAM,IAAIlC,mBAAmB,IAAI,CAAC;MAC3F,IACEyD,WAAW,IAAID,SAAS,CAACd,IAAI,IAC7Be,WAAW,IAAID,SAAS,CAACG,KAAK,IAC9BD,WAAW,IAAIF,SAAS,CAACZ,GAAG,IAC5Bc,WAAW,IAAIF,SAAS,CAACI,MAAM,EAC/B;QACAxC,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM;QACLA,eAAe,CAAC,KAAK,CAAC;MACxB;IACF;EACF,CAAC;EAED,MAAMyC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIxD,QAAQ,CAACE,UAAU,EAAE;MACvB,IAAIY,YAAY,EAAE;QAChB,MAAMgB,QAAQ,GAAGjC,OAAO,CAACwB,KAAK,CAACoC,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKA,GAAG,KAAK3D,QAAQ,CAACG,SAAS,CAAC;QAC7EL,UAAU,CAAC;UAAE,GAAGD,OAAO;UAAEwB,KAAK,EAAES;QAAS,CAAC,CAAC;MAC7C;MACA7B,WAAW,CAAC;QAAEC,UAAU,EAAE,KAAK;QAAEC,SAAS,EAAE,IAAI;QAAEC,OAAO,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAE,CAAC,CAAC;MAC3EU,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAM6C,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,SAAS,GAAG,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACtC,MAAMC,OAAO,GAAG;MACd1C,MAAM,EAAEuC,SAAS;MACjBI,IAAI,EAAE,QAAQ;MACdjB,CAAC,EAAE,GAAG,GAAGkB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAC5BlB,CAAC,EAAE,GAAG,GAAGiB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAC5BvC,KAAK,EAAElC,kBAAkB;MACzBmC,MAAM,EAAElC;IACV,CAAC;IACDG,UAAU,CAAC;MAAE,GAAGD,OAAO;MAAEwB,KAAK,EAAE,CAAC,GAAGxB,OAAO,CAACwB,KAAK,EAAE2C,OAAO;IAAE,CAAC,CAAC;EAChE,CAAC;EAED,MAAMI,eAAe,GAAGA,CAACC,IAAI,EAAEnD,KAAK,KAAK;IACvC,IAAIZ,UAAU,EAAE;MACd,IAAI,CAACE,SAAS,EAAE;QACdC,YAAY,CAAC4D,IAAI,CAAC/C,MAAM,CAAC;MAC3B,CAAC,MAAM;QACL,IAAId,SAAS,KAAK6D,IAAI,CAAC/C,MAAM,EAAE;UAC7Bb,YAAY,CAAC,IAAI,CAAC;QACpB,CAAC,MAAM;UACL,MAAM6D,OAAO,GAAG;YACdC,EAAE,EAAE,QAAQT,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;YACxBS,IAAI,EAAEhE,SAAS;YACfiE,EAAE,EAAEJ,IAAI,CAAC/C;UACX,CAAC;UACD,MAAMoD,QAAQ,GAAG7E,OAAO,CAAC8E,KAAK,GAAG,CAAC,GAAG9E,OAAO,CAAC8E,KAAK,EAAEL,OAAO,CAAC,GAAG,CAACA,OAAO,CAAC;UACxExE,UAAU,CAAC;YAAE,GAAGD,OAAO;YAAE8E,KAAK,EAAED;UAAS,CAAC,CAAC;UAC3CjE,YAAY,CAAC,IAAI,CAAC;QACpB;MACF;IACF;EACF,CAAC;EAED,MAAMmE,eAAe,GAAGA,CAACC,MAAM,EAAE7C,CAAC,KAAK;IACrCA,CAAC,CAAC8C,eAAe,CAAC,CAAC;IACnB,IAAIC,MAAM,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;MACjC,MAAMN,QAAQ,GAAG,CAAC7E,OAAO,CAAC8E,KAAK,IAAI,EAAE,EAAElB,MAAM,CAACwB,IAAI,IAAIA,IAAI,CAACV,EAAE,KAAKM,MAAM,CAAC;MACzE/E,UAAU,CAAC;QAAE,GAAGD,OAAO;QAAE8E,KAAK,EAAED;MAAS,CAAC,CAAC;IAC7C;EACF,CAAC;EAED,MAAMQ,WAAW,GAAI5D,MAAM,IAAK;IAC9B,OAAOzB,OAAO,CAACwB,KAAK,CAAC8D,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9D,MAAM,KAAKA,MAAM,CAAC;EACrD,CAAC;;EAED;EACA,MAAM+D,qBAAqB,GAAIhB,IAAI,IAAK;IACtC,IAAI/D,UAAU,EAAE;IAChBK,gBAAgB,CAAC0D,IAAI,CAAC/C,MAAM,CAAC;IAC7BT,cAAc,CAACwD,IAAI,CAACJ,IAAI,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMqB,gBAAgB,GAAIhE,MAAM,IAAK;IACnC,MAAMQ,QAAQ,GAAGjC,OAAO,CAACwB,KAAK,CAACkE,GAAG,CAAClB,IAAI,IAAI;MACzC,IAAIA,IAAI,CAAC/C,MAAM,KAAKA,MAAM,EAAE;QAC1B,OAAO;UAAE,GAAG+C,IAAI;UAAEJ,IAAI,EAAErD;QAAY,CAAC;MACvC;MACA,OAAOyD,IAAI;IACb,CAAC,CAAC;IACFvE,UAAU,CAAC;MAAE,GAAGD,OAAO;MAAEwB,KAAK,EAAES;IAAS,CAAC,CAAC;IAC3CnB,gBAAgB,CAAC,IAAI,CAAC;IACtBE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACEpB,OAAA;IAAA+F,QAAA,gBAEE/F,OAAA;MAAKgG,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAG,CAAE;MAAAF,QAAA,gBAC/B/F,OAAA;QAAQkG,OAAO,EAAE/B,OAAQ;QAAA4B,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxCtG,OAAA;QACEkG,OAAO,EAAEA,CAAA,KAAM;UACbpF,aAAa,CAAC,CAACD,UAAU,CAAC;UAC1BG,YAAY,CAAC,IAAI,CAAC;QACpB,CAAE;QACFgF,KAAK,EAAE;UAAEO,UAAU,EAAE;QAAG,CAAE;QAAAR,QAAA,EAEzBlF,UAAU,GAAG,YAAY,GAAG;MAAU;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,EACRzF,UAAU,iBACTb,OAAA;QAAMgG,KAAK,EAAE;UAAEO,UAAU,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAT,QAAA,EAC5ChF,SAAS,GACN,UAAUA,SAAS,aAAa,GAChC;MAAe;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGNtG,OAAA;MACEgG,KAAK,EAAE;QACLS,QAAQ,EAAE,UAAU;QACpBtE,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,OAAO;QACfsE,MAAM,EAAE,gBAAgB;QACxBC,QAAQ,EAAE;MACZ,CAAE;MACFC,WAAW,EAAE7D,eAAgB;MAC7B8D,SAAS,EAAE9C,aAAc;MAAAgC,QAAA,gBAGzB/F,OAAA;QACEgG,KAAK,EAAE;UACLS,QAAQ,EAAE,UAAU;UACpB3D,GAAG,EAAE,CAAC;UACNF,IAAI,EAAE,CAAC;UACPT,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,MAAM;UACd0E,aAAa,EAAE,MAAM;UACrBH,QAAQ,EAAE;QACZ,CAAE;QAAAZ,QAAA,EAED,CAAC3F,OAAO,CAAC8E,KAAK,IAAI,EAAE,EAAEY,GAAG,CAAEN,IAAI,IAAK;UACnC,MAAMuB,QAAQ,GAAGtB,WAAW,CAACD,IAAI,CAACT,IAAI,CAAC;UACvC,MAAMiC,MAAM,GAAGvB,WAAW,CAACD,IAAI,CAACR,EAAE,CAAC;UACnC,IAAI,CAAC+B,QAAQ,IAAI,CAACC,MAAM,EAAE,OAAO,IAAI;UACrC,oBACEhH,OAAA;YAEEiH,EAAE,EAAEF,QAAQ,CAACxD,CAAC,GAAG,CAACwD,QAAQ,CAAC5E,KAAK,IAAIlC,kBAAkB,IAAI,CAAE;YAC5DiH,EAAE,EAAEH,QAAQ,CAACvD,CAAC,GAAG,CAACuD,QAAQ,CAAC3E,MAAM,IAAIlC,mBAAmB,IAAI,CAAE;YAC9DiH,EAAE,EAAEH,MAAM,CAACzD,CAAC,GAAG,CAACyD,MAAM,CAAC7E,KAAK,IAAIlC,kBAAkB,IAAI,CAAE;YACxDmH,EAAE,EAAEJ,MAAM,CAACxD,CAAC,GAAG,CAACwD,MAAM,CAAC5E,MAAM,IAAIlC,mBAAmB,IAAI,CAAE;YAC1DmH,MAAM,EAAC,OAAO;YACdC,WAAW,EAAC,GAAG;YACfR,aAAa,EAAC,eAAe;YAC7BZ,OAAO,EAAG3D,CAAC,IAAK4C,eAAe,CAACK,IAAI,CAACV,EAAE,EAAEvC,CAAC;UAAE,GARvCiD,IAAI,CAACV,EAAE;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASb,CAAC;QAEN,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACLlG,OAAO,CAACwB,KAAK,CAACkE,GAAG,CAAC,CAAClB,IAAI,EAAEV,GAAG,KAAK;QAChC;QACA,MAAMqD,cAAc,GAAGhH,QAAQ,CAACE,UAAU,IAAIF,QAAQ,CAACG,SAAS,KAAKwD,GAAG;QACxE,MAAMsD,KAAK,GACTvG,aAAa,KAAK2D,IAAI,CAAC/C,MAAM,GACzB,GAAG,GACH0F,cAAc,GACdlG,YAAY,GACV,GAAG,GACH,GAAG,GACL,GAAG;QACT,oBACErB,OAAA;UAEEgG,KAAK,EAAE;YACLS,QAAQ,EAAE,UAAU;YACpB7D,IAAI,EAAEgC,IAAI,CAACrB,CAAC;YACZT,GAAG,EAAE8B,IAAI,CAACpB,CAAC;YACXrB,KAAK,EAAEyC,IAAI,CAACzC,KAAK,IAAIlC,kBAAkB;YACvCmC,MAAM,EAAEwC,IAAI,CAACxC,MAAM,IAAIlC,mBAAmB;YAC1CuH,OAAO,EAAE,UAAU;YACnBC,UAAU,EAAExD,GAAG,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;YAC7CwC,MAAM,EAAE,gBAAgB;YACxBiB,YAAY,EAAE,KAAK;YACnBC,MAAM,EAAE/G,UAAU,GAAG,SAAS,GAAG,MAAM;YACvCgH,UAAU,EAAE,MAAM;YAClBC,SAAS,EAAE,SAASN,KAAK,GAAG;YAC5BO,eAAe,EAAE,QAAQ;YACzBC,MAAM,EAAE,MAAM;YACdrB,QAAQ,EAAE,QAAQ;YAClBsB,UAAU,EAAE;UACd,CAAE;UACFC,WAAW,EAAG3F,CAAC,IAAKD,eAAe,CAACC,CAAC,EAAE2B,GAAG,CAAE;UAC5CgC,OAAO,EAAEA,CAAA,KAAMvB,eAAe,CAACC,IAAI,EAAEV,GAAG,CAAE;UAC1CiE,aAAa,EAAEA,CAAA,KAAMvC,qBAAqB,CAAChB,IAAI,CAAE;UACjDiC,SAAS,EAAGtE,CAAC,IAAK;YAChB,IAAItB,aAAa,KAAK2D,IAAI,CAAC/C,MAAM,EAAE;cACjCL,gBAAgB,CAAC0C,GAAG,EAAE3B,CAAC,CAACU,aAAa,EAAEuE,KAAK,CAAC;YAC/C;UACF,CAAE;UAAAzB,QAAA,EAED9E,aAAa,KAAK2D,IAAI,CAAC/C,MAAM,gBAC5B7B,OAAA;YACEoI,KAAK,EAAEjH,WAAY;YACnBkH,QAAQ,EAAG9F,CAAC,IAAKnB,cAAc,CAACmB,CAAC,CAACE,MAAM,CAAC2F,KAAK,CAAE;YAChDE,SAAS,EAAG/F,CAAC,IAAK;cAChB,IAAIA,CAAC,CAACgG,GAAG,KAAK,OAAO,IAAI,CAAChG,CAAC,CAACiG,QAAQ,EAAE;gBACpCjG,CAAC,CAACkG,cAAc,CAAC,CAAC;gBAClB5C,gBAAgB,CAACjB,IAAI,CAAC/C,MAAM,CAAC;cAC/B;YACF,CAAE;YACF6G,SAAS;YACT1C,KAAK,EAAE;cAAE7D,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE,MAAM;cAAE4F,MAAM,EAAE;YAAO;UAAE;YAAA7B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1D,CAAC,gBAEFtG,OAAA;YACEgG,KAAK,EAAE;cAAE7D,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE,MAAM;cAAEuE,QAAQ,EAAE;YAAS,CAAE;YAC7DgC,uBAAuB,EAAE;cACvBC,MAAM,EAAE/I,MAAM,CAACgJ,KAAK,CAACjE,IAAI,CAACJ,IAAI,EAAE;gBAAEsE,MAAM,EAAE;cAAK,CAAC;YAClD;UAAE;YAAA3C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QACF,GAhDI1B,IAAI,CAAC/C,MAAM;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiDb,CAAC;MAEV,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNtG,OAAA;MACE+I,GAAG,EAAExH,QAAS;MACdyE,KAAK,EAAE;QACLS,QAAQ,EAAE,UAAU;QACpB3C,MAAM,EAAE,EAAE;QACVlB,IAAI,EAAE,KAAK;QACXkF,SAAS,EAAE;MACb,CAAE;MAAA/B,QAAA,eAEF/F,OAAA;QACEmC,KAAK,EAAEd,YAAY,GAAG,EAAE,GAAG,EAAG;QAC9Be,MAAM,EAAEf,YAAY,GAAG,EAAE,GAAG,EAAG;QAC/B2H,OAAO,EAAC,WAAW;QACnBC,IAAI,EAAC,KAAK;QAAAlD,QAAA,eAEV/F,OAAA;UAAMkJ,CAAC,EAAC;QAAuH;UAAA/C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/H;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChG,EAAA,CAzSQH,aAAa;AAAAgJ,EAAA,GAAbhJ,aAAa;AA2StB,eAAeA,aAAa;AAAC,IAAAgJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}