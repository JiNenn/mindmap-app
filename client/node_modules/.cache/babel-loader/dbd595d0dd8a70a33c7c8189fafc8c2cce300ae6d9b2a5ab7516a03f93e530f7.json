{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ThankButton from './ThankButton';\n\n/**\r\n * キャンバス上にノードと線を描画・編集するコンポーネント\r\n * ・各ノードは position: absolute で配置され、ドラッグ操作で自由移動可能\r\n * ・背景の SVG レイヤーで、各線オブジェクトに基づきノード同士を線で結ぶ\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n\n  // ノード上でマウスダウン：ドラッグ開始\n  const handleMouseDown = (e, index) => {\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n\n  // キャンバス上でマウス移動：ドラッグ中のノード位置を更新\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const containerRect = e.currentTarget.getBoundingClientRect();\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // マウスアップでドラッグ終了\n  const handleMouseUp = () => {\n    setDragging({\n      isDragging: false,\n      nodeIndex: null,\n      offsetX: 0,\n      offsetY: 0\n    });\n  };\n\n  // 指定された nodeId から該当ノードを取得（線描画用）\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(node => node.nodeId === nodeId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '500px',\n      border: '1px solid #777',\n      overflow: 'hidden'\n    },\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      children: mindmap.lines && mindmap.lines.map(line => {\n        const fromNode = getNodeById(line.from);\n        const toNode = getNodeById(line.to);\n        if (!fromNode || !toNode) return null;\n        // ノードの中心付近を線の起点・終点にするためオフセットを調整\n        const fromX = fromNode.x + 50; // 仮のオフセット値\n        const fromY = fromNode.y + 20;\n        const toX = toNode.x + 50;\n        const toY = toNode.y + 20;\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: fromX,\n          y1: fromY,\n          x2: toX,\n          y2: toY,\n          stroke: \"#888\",\n          strokeWidth: \"2\"\n        }, line.lineId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), mindmap.nodes.map((node, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: node.x,\n        top: node.y,\n        padding: '8px 12px',\n        background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\n        border: '1px solid #333',\n        borderRadius: '4px',\n        cursor: 'move',\n        userSelect: 'none'\n      },\n      onMouseDown: e => handleMouseDown(e, idx),\n      children: node.text\n    }, node.nodeId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: 10,\n        left: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(ThankButton, {\n        mindmapId: mindmap.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"76v8AbuqCZ23j9KyKncaaYdQSMk=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","ThankButton","jsxDEV","_jsxDEV","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","handleMouseDown","e","index","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","containerRect","currentTarget","newX","newY","newNodes","nodes","x","y","handleMouseUp","getNodeById","nodeId","find","node","style","position","width","height","border","overflow","onMouseMove","onMouseUp","children","pointerEvents","lines","map","line","fromNode","from","toNode","to","fromX","fromY","toX","toY","x1","y1","x2","y2","stroke","strokeWidth","lineId","fileName","_jsxFileName","lineNumber","columnNumber","idx","padding","background","borderRadius","cursor","userSelect","onMouseDown","text","bottom","mindmapId","id","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ThankButton from './ThankButton';\r\n\r\n/**\r\n * キャンバス上にノードと線を描画・編集するコンポーネント\r\n * ・各ノードは position: absolute で配置され、ドラッグ操作で自由移動可能\r\n * ・背景の SVG レイヤーで、各線オブジェクトに基づきノード同士を線で結ぶ\r\n */\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n\r\n  // ノード上でマウスダウン：ドラッグ開始\r\n  const handleMouseDown = (e, index) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  // キャンバス上でマウス移動：ドラッグ中のノード位置を更新\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const containerRect = e.currentTarget.getBoundingClientRect();\r\n    const newX = e.clientX - containerRect.left - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // マウスアップでドラッグ終了\r\n  const handleMouseUp = () => {\r\n    setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n  };\r\n\r\n  // 指定された nodeId から該当ノードを取得（線描画用）\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find(node => node.nodeId === nodeId);\r\n  };\r\n\r\n  return (\r\n    <div \r\n      style={{ \r\n        position: 'relative', \r\n        width: '100%', \r\n        height: '500px', \r\n        border: '1px solid #777',\r\n        overflow: 'hidden'\r\n      }}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n    >\r\n      {/* SVGレイヤーで線を描画 */}\r\n      <svg\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          pointerEvents: 'none'\r\n        }}\r\n      >\r\n        {mindmap.lines && mindmap.lines.map((line) => {\r\n          const fromNode = getNodeById(line.from);\r\n          const toNode = getNodeById(line.to);\r\n          if (!fromNode || !toNode) return null;\r\n          // ノードの中心付近を線の起点・終点にするためオフセットを調整\r\n          const fromX = fromNode.x + 50; // 仮のオフセット値\r\n          const fromY = fromNode.y + 20;\r\n          const toX = toNode.x + 50;\r\n          const toY = toNode.y + 20;\r\n          return (\r\n            <line\r\n              key={line.lineId}\r\n              x1={fromX}\r\n              y1={fromY}\r\n              x2={toX}\r\n              y2={toY}\r\n              stroke=\"#888\"\r\n              strokeWidth=\"2\"\r\n            />\r\n          );\r\n        })}\r\n      </svg>\r\n      {/* ノードの描画 */}\r\n      {mindmap.nodes.map((node, idx) => (\r\n        <div\r\n          key={node.nodeId}\r\n          style={{\r\n            position: 'absolute',\r\n            left: node.x,\r\n            top: node.y,\r\n            padding: '8px 12px',\r\n            background: idx === 0 ? '#ffe4b2' : '#d1f0d1',\r\n            border: '1px solid #333',\r\n            borderRadius: '4px',\r\n            cursor: 'move',\r\n            userSelect: 'none'\r\n          }}\r\n          onMouseDown={(e) => handleMouseDown(e, idx)}\r\n        >\r\n          {node.text}\r\n        </div>\r\n      ))}\r\n      {/* キャンバス下部に「ありがとう」ボタン */}\r\n      <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\r\n        <ThankButton mindmapId={mindmap.id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}