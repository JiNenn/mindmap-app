{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\n// client/src/components/MindmapCanvas.js\nimport React, { useState } from 'react';\nimport { marked } from 'marked';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_NODE_WIDTH = 150;\nconst DEFAULT_NODE_HEIGHT = 80;\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n  const [editingNodeId, setEditingNodeId] = useState(null);\n  const [editingText, setEditingText] = useState('');\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\n\n  /**\r\n   * ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\r\n   * ※編集中のノードの場合はサイズ更新しない\r\n   */\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\n    const newWidth = el.offsetWidth / scaleFactor;\n    const newHeight = el.offsetHeight / scaleFactor;\n    const currentNode = mindmap.nodes[index];\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\n      const newNodes = [...mindmap.nodes];\n      newNodes[index] = {\n        ...newNodes[index],\n        width: newWidth,\n        height: newHeight\n      };\n      setMindmap({\n        ...mindmap,\n        nodes: newNodes\n      });\n    }\n  };\n\n  /**\r\n   * ノードのドラッグ開始（エッジ追加モード／編集中は無効）\r\n   */\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode || editingNodeId) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n\n  /**\r\n   * ノードのドラッグ中の座標更新\r\n   */\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const container = e.currentTarget;\n    const containerRect = container.getBoundingClientRect();\n    const scrollLeft = container.scrollLeft;\n    const scrollTop = container.scrollTop;\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  /**\r\n   * ドラッグ終了\r\n   */\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n    }\n  };\n\n  /**\r\n   * ノード追加\r\n   */\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200,\n      width: DEFAULT_NODE_WIDTH,\n      height: DEFAULT_NODE_HEIGHT\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n\n  /**\r\n   * ノードクリック（エッジモード時のみ動作）\r\n   */\n  const handleNodeClick = node => {\n    if (!isEdgeMode) return;\n    if (!edgeStart) {\n      setEdgeStart(node.nodeId);\n    } else {\n      if (edgeStart === node.nodeId) {\n        setEdgeStart(null);\n      } else {\n        const newEdge = {\n          id: `edge_${Date.now()}`,\n          from: edgeStart,\n          to: node.nodeId\n        };\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n        setMindmap({\n          ...mindmap,\n          edges: newEdges\n        });\n        setEdgeStart(null);\n      }\n    }\n  };\n\n  /**\r\n   * エッジクリックで削除確認\r\n   */\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n\n  /**\r\n   * nodeId からノード情報を取得\r\n   */\n  const getNodeById = nodeId => mindmap.nodes.find(n => n.nodeId === nodeId);\n\n  /**\r\n   * ノードをダブルクリックで Markdown 編集モードに切替\r\n   */\n  const handleNodeDoubleClick = node => {\n    if (isEdgeMode) return;\n    setEditingNodeId(node.nodeId);\n    setEditingText(node.text);\n  };\n\n  /**\r\n   * 編集完了：Enter キー（Shift+Enter で改行可能）で Markdown を保存\r\n   */\n  const handleEditFinish = nodeId => {\n    const newNodes = mindmap.nodes.map(node => node.nodeId === nodeId ? {\n      ...node,\n      text: editingText\n    } : node);\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n    setEditingNodeId(null);\n    setEditingText('');\n  };\n\n  /**\r\n   * ノード削除ボタン\r\n   */\n  const handleDeleteNode = (index, e) => {\n    e.stopPropagation();\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // UI: エッジモード情報\n  const edgeModeInfo = isEdgeMode ? edgeStart ? `エッジ追加中… 開始ノード: ${edgeStart} → 次のノードを選択` : 'エッジ追加モード：ノードを選択してください' : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: canvasStyles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: canvasStyles.controlBar,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: canvasStyles.controlButton,\n        onClick: addNode,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...canvasStyles.controlButton,\n          background: isEdgeMode ? '#dc3545' : '#6c757d'\n        },\n        onClick: () => {\n          setIsEdgeMode(prev => !prev);\n          setEdgeStart(null);\n        },\n        children: isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), edgeModeInfo && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: canvasStyles.edgeInfo,\n        children: edgeModeInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: canvasStyles.canvasArea,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: canvasStyles.svgLayer,\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y1: fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            x2: toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y2: toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => {\n        const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\n        const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\n\n        // ノードごとのスタイル（デフォルト・エッジ接続ありなど）\n        let nodeBackground = '#ffffff';\n        let textColor = 'black';\n        let nodeRadius = '4px';\n        if (idx === 0) {\n          nodeBackground = '#006400';\n          textColor = '#ffffff';\n          nodeRadius = '15px';\n        } else if (mindmap.edges && mindmap.nodes.length > 0) {\n          const fromNodeId = mindmap.nodes[0].nodeId;\n          const hasEdgeFromIdx0 = mindmap.edges.some(edge => edge.from === fromNodeId && edge.to === node.nodeId);\n          if (hasEdgeFromIdx0) {\n            nodeBackground = '#50C878';\n            nodeRadius = '4px';\n          }\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: node.x,\n            top: node.y,\n            width: node.width || DEFAULT_NODE_WIDTH,\n            height: node.height || DEFAULT_NODE_HEIGHT,\n            padding: '8px',\n            background: nodeBackground,\n            color: textColor,\n            border: '1.5px solid #aaa',\n            borderRadius: nodeRadius,\n            cursor: isEdgeMode ? 'pointer' : 'move',\n            userSelect: 'none',\n            transform: `scale(${scale})`,\n            transformOrigin: 'center',\n            resize: 'both',\n            overflow: 'hidden',\n            boxSizing: 'border-box'\n          },\n          onMouseDown: e => handleDragStart(e, idx),\n          onDoubleClick: () => handleNodeDoubleClick(node),\n          onClick: () => handleNodeClick(node),\n          onMouseEnter: () => setHoveredNodeId(node.nodeId),\n          onMouseLeave: () => setHoveredNodeId(null),\n          onMouseUp: e => {\n            if (editingNodeId !== node.nodeId) {\n              handleNodeResize(idx, e.currentTarget, scale);\n            }\n          },\n          children: [hoveredNodeId === node.nodeId && editingNodeId !== node.nodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => handleDeleteNode(idx, e),\n            style: {\n              position: 'absolute',\n              top: 2,\n              right: 2,\n              width: 20,\n              height: 20,\n              borderRadius: '50%',\n              background: '#fff',\n              border: '1px solid #ccc',\n              color: 'red',\n              fontWeight: 'bold',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer',\n              zIndex: 10\n            },\n            title: \"\\u30CE\\u30FC\\u30C9\\u3092\\u524A\\u9664\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this), editingNodeId === node.nodeId ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editingText,\n            onChange: e => setEditingText(e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleEditFinish(node.nodeId);\n              }\n            },\n            autoFocus: true,\n            style: {\n              width: '100%',\n              height: '100%',\n              resize: 'none',\n              border: 'none',\n              outline: 'none',\n              background: 'rgba(255,255,255,0.9)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden',\n              lineHeight: '1.4'\n            },\n            dangerouslySetInnerHTML: {\n              __html: marked.parse(node.text, {\n                breaks: true\n              })\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this)]\n        }, node.nodeId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"1SYppGudLolqPJcu1FC1z1xMcfA=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nconst canvasStyles = {\n  container: {\n    width: '100%'\n  },\n  controlBar: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '10px',\n    gap: '10px'\n  },\n  controlButton: {\n    background: '#007BFF',\n    color: '#fff',\n    border: 'none',\n    padding: '8px 16px',\n    borderRadius: '4px',\n    cursor: 'pointer'\n  },\n  edgeInfo: {\n    marginLeft: '10px',\n    color: '#555'\n  },\n  canvasArea: {\n    position: 'relative',\n    width: '100%',\n    height: '50px',\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n    overflow: 'auto'\n  },\n  svgLayer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    pointerEvents: 'none'\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","marked","jsxDEV","_jsxDEV","DEFAULT_NODE_WIDTH","DEFAULT_NODE_HEIGHT","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","editingNodeId","setEditingNodeId","editingText","setEditingText","hoveredNodeId","setHoveredNodeId","handleNodeResize","index","el","scaleFactor","nodes","nodeId","newWidth","offsetWidth","newHeight","offsetHeight","currentNode","width","height","newNodes","handleDragStart","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","container","currentTarget","containerRect","scrollLeft","scrollTop","newX","newY","x","y","handleMouseUp","addNode","newNodeId","Date","now","newNode","text","Math","random","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","filter","edge","getNodeById","find","n","handleNodeDoubleClick","handleEditFinish","map","handleDeleteNode","_","idx","edgeModeInfo","style","canvasStyles","children","controlBar","controlButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","background","prev","edgeInfo","canvasArea","onMouseMove","onMouseUp","svgLayer","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","pointerEvents","isDraggingNode","scale","nodeBackground","textColor","nodeRadius","length","fromNodeId","hasEdgeFromIdx0","some","position","padding","color","border","borderRadius","cursor","userSelect","transform","transformOrigin","resize","overflow","boxSizing","onMouseDown","onDoubleClick","onMouseEnter","onMouseLeave","right","fontWeight","display","alignItems","justifyContent","zIndex","title","value","onChange","onKeyDown","key","shiftKey","preventDefault","autoFocus","outline","lineHeight","dangerouslySetInnerHTML","__html","parse","breaks","_c","marginBottom","gap","marginLeft","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["// client/src/components/MindmapCanvas.js\r\nimport React, { useState } from 'react';\r\nimport { marked } from 'marked';\r\n\r\nconst DEFAULT_NODE_WIDTH = 150;\r\nconst DEFAULT_NODE_HEIGHT = 80;\r\n\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n  const [editingNodeId, setEditingNodeId] = useState(null);\r\n  const [editingText, setEditingText] = useState('');\r\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\r\n\r\n  /**\r\n   * ノードのサイズ更新（ユーザーがリサイズ操作後に呼び出し）\r\n   * ※編集中のノードの場合はサイズ更新しない\r\n   */\r\n  const handleNodeResize = (index, el, scaleFactor = 1.0) => {\r\n    if (editingNodeId === mindmap.nodes[index].nodeId) return;\r\n    const newWidth = el.offsetWidth / scaleFactor;\r\n    const newHeight = el.offsetHeight / scaleFactor;\r\n    const currentNode = mindmap.nodes[index];\r\n\r\n    if (currentNode.width !== newWidth || currentNode.height !== newHeight) {\r\n      const newNodes = [...mindmap.nodes];\r\n      newNodes[index] = { ...newNodes[index], width: newWidth, height: newHeight };\r\n      setMindmap({ ...mindmap, nodes: newNodes });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ノードのドラッグ開始（エッジ追加モード／編集中は無効）\r\n   */\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode || editingNodeId) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  /**\r\n   * ノードのドラッグ中の座標更新\r\n   */\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const container = e.currentTarget;\r\n    const containerRect = container.getBoundingClientRect();\r\n    const scrollLeft = container.scrollLeft;\r\n    const scrollTop = container.scrollTop;\r\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  /**\r\n   * ドラッグ終了\r\n   */\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ノード追加\r\n   */\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200,\r\n      width: DEFAULT_NODE_WIDTH,\r\n      height: DEFAULT_NODE_HEIGHT\r\n    };\r\n    setMindmap({ ...mindmap, nodes: [...mindmap.nodes, newNode] });\r\n  };\r\n\r\n  /**\r\n   * ノードクリック（エッジモード時のみ動作）\r\n   */\r\n  const handleNodeClick = (node) => {\r\n    if (!isEdgeMode) return;\r\n    if (!edgeStart) {\r\n      setEdgeStart(node.nodeId);\r\n    } else {\r\n      if (edgeStart === node.nodeId) {\r\n        setEdgeStart(null);\r\n      } else {\r\n        const newEdge = {\r\n          id: `edge_${Date.now()}`,\r\n          from: edgeStart,\r\n          to: node.nodeId\r\n        };\r\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n        setMindmap({ ...mindmap, edges: newEdges });\r\n        setEdgeStart(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * エッジクリックで削除確認\r\n   */\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter((edge) => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * nodeId からノード情報を取得\r\n   */\r\n  const getNodeById = (nodeId) => mindmap.nodes.find((n) => n.nodeId === nodeId);\r\n\r\n  /**\r\n   * ノードをダブルクリックで Markdown 編集モードに切替\r\n   */\r\n  const handleNodeDoubleClick = (node) => {\r\n    if (isEdgeMode) return;\r\n    setEditingNodeId(node.nodeId);\r\n    setEditingText(node.text);\r\n  };\r\n\r\n  /**\r\n   * 編集完了：Enter キー（Shift+Enter で改行可能）で Markdown を保存\r\n   */\r\n  const handleEditFinish = (nodeId) => {\r\n    const newNodes = mindmap.nodes.map((node) =>\r\n      node.nodeId === nodeId ? { ...node, text: editingText } : node\r\n    );\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n    setEditingNodeId(null);\r\n    setEditingText('');\r\n  };\r\n\r\n  /**\r\n   * ノード削除ボタン\r\n   */\r\n  const handleDeleteNode = (index, e) => {\r\n    e.stopPropagation();\r\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // UI: エッジモード情報\r\n  const edgeModeInfo = isEdgeMode\r\n    ? edgeStart\r\n      ? `エッジ追加中… 開始ノード: ${edgeStart} → 次のノードを選択`\r\n      : 'エッジ追加モード：ノードを選択してください'\r\n    : null;\r\n\r\n  return (\r\n    <div style={canvasStyles.container}>\r\n      {/* コントロールバー */}\r\n      <div style={canvasStyles.controlBar}>\r\n        <button style={canvasStyles.controlButton} onClick={addNode}>\r\n          ノード追加\r\n        </button>\r\n        <button\r\n          style={{\r\n            ...canvasStyles.controlButton,\r\n            background: isEdgeMode ? '#dc3545' : '#6c757d'\r\n          }}\r\n          onClick={() => {\r\n            setIsEdgeMode((prev) => !prev);\r\n            setEdgeStart(null);\r\n          }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加モード解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {edgeModeInfo && <span style={canvasStyles.edgeInfo}>{edgeModeInfo}</span>}\r\n      </div>\r\n\r\n      {/* キャンバス領域 */}\r\n      <div\r\n        style={canvasStyles.canvasArea}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* エッジ用 SVG */}\r\n        <svg style={canvasStyles.svgLayer}>\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y1={fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                x2={toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y2={toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                stroke=\"#333\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n\r\n        {/* ノード描画 */}\r\n        {mindmap.nodes.map((node, idx) => {\r\n          const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\r\n          const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\r\n\r\n          // ノードごとのスタイル（デフォルト・エッジ接続ありなど）\r\n          let nodeBackground = '#ffffff';\r\n          let textColor = 'black';\r\n          let nodeRadius = '4px';\r\n          if (idx === 0) {\r\n            nodeBackground = '#006400';\r\n            textColor = '#ffffff';\r\n            nodeRadius = '15px';\r\n          } else if (mindmap.edges && mindmap.nodes.length > 0) {\r\n            const fromNodeId = mindmap.nodes[0].nodeId;\r\n            const hasEdgeFromIdx0 = mindmap.edges.some(\r\n              (edge) => edge.from === fromNodeId && edge.to === node.nodeId\r\n            );\r\n            if (hasEdgeFromIdx0) {\r\n              nodeBackground = '#50C878';\r\n              nodeRadius = '4px';\r\n            }\r\n          }\r\n\r\n          return (\r\n            <div\r\n              key={node.nodeId}\r\n              style={{\r\n                position: 'absolute',\r\n                left: node.x,\r\n                top: node.y,\r\n                width: node.width || DEFAULT_NODE_WIDTH,\r\n                height: node.height || DEFAULT_NODE_HEIGHT,\r\n                padding: '8px',\r\n                background: nodeBackground,\r\n                color: textColor,\r\n                border: '1.5px solid #aaa',\r\n                borderRadius: nodeRadius,\r\n                cursor: isEdgeMode ? 'pointer' : 'move',\r\n                userSelect: 'none',\r\n                transform: `scale(${scale})`,\r\n                transformOrigin: 'center',\r\n                resize: 'both',\r\n                overflow: 'hidden',\r\n                boxSizing: 'border-box'\r\n              }}\r\n              onMouseDown={(e) => handleDragStart(e, idx)}\r\n              onDoubleClick={() => handleNodeDoubleClick(node)}\r\n              onClick={() => handleNodeClick(node)}\r\n              onMouseEnter={() => setHoveredNodeId(node.nodeId)}\r\n              onMouseLeave={() => setHoveredNodeId(null)}\r\n              onMouseUp={(e) => {\r\n                if (editingNodeId !== node.nodeId) {\r\n                  handleNodeResize(idx, e.currentTarget, scale);\r\n                }\r\n              }}\r\n            >\r\n              {hoveredNodeId === node.nodeId && editingNodeId !== node.nodeId && (\r\n                <div\r\n                  onClick={(e) => handleDeleteNode(idx, e)}\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: 2,\r\n                    right: 2,\r\n                    width: 20,\r\n                    height: 20,\r\n                    borderRadius: '50%',\r\n                    background: '#fff',\r\n                    border: '1px solid #ccc',\r\n                    color: 'red',\r\n                    fontWeight: 'bold',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    cursor: 'pointer',\r\n                    zIndex: 10\r\n                  }}\r\n                  title=\"ノードを削除\"\r\n                >\r\n                  ×\r\n                </div>\r\n              )}\r\n              {editingNodeId === node.nodeId ? (\r\n                <textarea\r\n                  value={editingText}\r\n                  onChange={(e) => setEditingText(e.target.value)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                      e.preventDefault();\r\n                      handleEditFinish(node.nodeId);\r\n                    }\r\n                  }}\r\n                  autoFocus\r\n                  style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    resize: 'none',\r\n                    border: 'none',\r\n                    outline: 'none',\r\n                    background: 'rgba(255,255,255,0.9)'\r\n                  }}\r\n                />\r\n              ) : (\r\n                <div\r\n                  style={{ width: '100%', height: '100%', overflow: 'hidden', lineHeight: '1.4' }}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: marked.parse(node.text, { breaks: true })\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n\r\nconst canvasStyles = {\r\n  container: {\r\n    width: '100%'\r\n  },\r\n  controlBar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: '10px',\r\n    gap: '10px'\r\n  },\r\n  controlButton: {\r\n    background: '#007BFF',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '8px 16px',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer'\r\n  },\r\n  edgeInfo: {\r\n    marginLeft: '10px',\r\n    color: '#555'\r\n  },\r\n  canvasArea: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '50px',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '4px',\r\n    overflow: 'auto'\r\n  },\r\n  svgLayer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    height: '100%',\r\n    pointerEvents: 'none'\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}