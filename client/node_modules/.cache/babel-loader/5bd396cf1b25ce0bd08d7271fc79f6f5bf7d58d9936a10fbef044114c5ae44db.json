{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treev\\\\mindmap-app\\\\client\\\\src\\\\components\\\\MindmapCanvas.js\",\n  _s = $RefreshSig$();\n// client/src/components/MindmapCanvas.js\nimport React, { useState } from 'react';\nimport { marked } from 'marked';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_NODE_WIDTH = 150;\nconst DEFAULT_NODE_HEIGHT = 80;\nfunction MindmapCanvas({\n  mindmap,\n  setMindmap\n}) {\n  _s();\n  const [dragging, setDragging] = useState({\n    isDragging: false,\n    nodeIndex: null,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\n  const [edgeStart, setEdgeStart] = useState(null);\n\n  // ノード編集用\n  const [editingNodeId, setEditingNodeId] = useState(null);\n  const [editingText, setEditingText] = useState('');\n\n  // ホバー状態のノードID（削除ボタン表示などに利用）\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\n\n  // ---------------------------------------------------------------------\n  // ノードサイズ更新（手動リサイズはリサイズハンドルで行うため削除）\n  // ---------------------------------------------------------------------\n  // → onMouseUp での自動リサイズ呼び出しを削除\n\n  // ---------------------------------------------------------------------\n  // ノードのドラッグ開始\n  // ---------------------------------------------------------------------\n  const handleDragStart = (e, index) => {\n    if (isEdgeMode || editingNodeId) return;\n    const rect = e.target.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    setDragging({\n      isDragging: true,\n      nodeIndex: index,\n      offsetX,\n      offsetY\n    });\n  };\n\n  // ---------------------------------------------------------------------\n  // ドラッグ中の座標更新\n  // ---------------------------------------------------------------------\n  const handleMouseMove = e => {\n    if (!dragging.isDragging) return;\n    const container = e.currentTarget;\n    const containerRect = container.getBoundingClientRect();\n    const scrollLeft = container.scrollLeft;\n    const scrollTop = container.scrollTop;\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\n    const newNodes = [...mindmap.nodes];\n    newNodes[dragging.nodeIndex] = {\n      ...newNodes[dragging.nodeIndex],\n      x: newX,\n      y: newY\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // ---------------------------------------------------------------------\n  // ドラッグ終了\n  // ---------------------------------------------------------------------\n  const handleMouseUp = () => {\n    if (dragging.isDragging) {\n      setDragging({\n        isDragging: false,\n        nodeIndex: null,\n        offsetX: 0,\n        offsetY: 0\n      });\n    }\n  };\n\n  // ---------------------------------------------------------------------\n  // ノード追加\n  // ---------------------------------------------------------------------\n  const addNode = () => {\n    const newNodeId = `node_${Date.now()}`;\n    const newNode = {\n      nodeId: newNodeId,\n      text: '新しいノード',\n      x: 100 + Math.random() * 200,\n      y: 100 + Math.random() * 200,\n      width: DEFAULT_NODE_WIDTH,\n      height: DEFAULT_NODE_HEIGHT\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: [...mindmap.nodes, newNode]\n    });\n  };\n\n  // ---------------------------------------------------------------------\n  // ノードクリック（エッジモード時のみ）\n  // ---------------------------------------------------------------------\n  const handleNodeClick = node => {\n    if (!isEdgeMode) return;\n    if (!edgeStart) {\n      setEdgeStart(node.nodeId);\n    } else {\n      if (edgeStart === node.nodeId) {\n        setEdgeStart(null);\n      } else {\n        const newEdge = {\n          id: `edge_${Date.now()}`,\n          from: edgeStart,\n          to: node.nodeId\n        };\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\n        setMindmap({\n          ...mindmap,\n          edges: newEdges\n        });\n        setEdgeStart(null);\n      }\n    }\n  };\n\n  // ---------------------------------------------------------------------\n  // エッジクリックで削除確認\n  // ---------------------------------------------------------------------\n  const handleEdgeClick = (edgeId, e) => {\n    e.stopPropagation();\n    if (window.confirm('この線を削除しますか？')) {\n      const newEdges = (mindmap.edges || []).filter(edge => edge.id !== edgeId);\n      setMindmap({\n        ...mindmap,\n        edges: newEdges\n      });\n    }\n  };\n\n  // ---------------------------------------------------------------------\n  // nodeId からノード情報を取得\n  // ---------------------------------------------------------------------\n  const getNodeById = nodeId => {\n    return mindmap.nodes.find(n => n.nodeId === nodeId);\n  };\n\n  // ---------------------------------------------------------------------\n  // ノードのダブルクリックで Markdown 編集モードに切替\n  // ---------------------------------------------------------------------\n  const handleNodeDoubleClick = node => {\n    if (isEdgeMode) return;\n    setEditingNodeId(node.nodeId);\n    setEditingText(node.text);\n  };\n\n  // ---------------------------------------------------------------------\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で Markdown を保存\n  // ---------------------------------------------------------------------\n  const handleEditFinish = nodeId => {\n    const newNodes = mindmap.nodes.map(node => node.nodeId === nodeId ? {\n      ...node,\n      text: editingText\n    } : node);\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n    setEditingNodeId(null);\n    setEditingText('');\n  };\n\n  // ---------------------------------------------------------------------\n  // ノード削除\n  // ---------------------------------------------------------------------\n  const handleDeleteNode = (index, e) => {\n    e.stopPropagation();\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // ---------------------------------------------------------------------\n  // ノードサイズ拡大用: 右下のリサイズハンドルをクリック\n  // ---------------------------------------------------------------------\n  const increaseNodeSize = index => {\n    const newNodes = [...mindmap.nodes];\n    const current = newNodes[index];\n    newNodes[index] = {\n      ...current,\n      width: (current.width || DEFAULT_NODE_WIDTH) + 20,\n      height: (current.height || DEFAULT_NODE_HEIGHT) + 20\n    };\n    setMindmap({\n      ...mindmap,\n      nodes: newNodes\n    });\n  };\n\n  // ---------------------------------------------------------------------\n  // UI: エッジモード情報\n  // ---------------------------------------------------------------------\n  const edgeModeInfo = isEdgeMode ? edgeStart ? `エッジ追加中… 開始ノード: ${edgeStart} → 次のノードを選択` : 'エッジ追加モード：ノードを選択してください' : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: 10,\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        style: canvasStyles.controlButton,\n        children: \"\\u30CE\\u30FC\\u30C9\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEdgeMode(prev => !prev);\n          setEdgeStart(null);\n        },\n        style: {\n          ...canvasStyles.controlButton,\n          background: isEdgeMode ? '#dc3545' : '#6c757d'\n        },\n        children: isEdgeMode ? 'エッジ追加解除' : 'エッジ追加モード'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), edgeModeInfo && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: canvasStyles.edgeInfo,\n        children: edgeModeInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: '500px',\n        border: '1px solid #ddd',\n        borderRadius: '4px',\n        overflow: 'auto'\n      },\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none'\n        },\n        children: (mindmap.edges || []).map(edge => {\n          const fromNode = getNodeById(edge.from);\n          const toNode = getNodeById(edge.to);\n          if (!fromNode || !toNode) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y1: fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            x2: toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2,\n            y2: toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2,\n            stroke: \"#333\",\n            strokeWidth: \"2\",\n            pointerEvents: \"visibleStroke\",\n            onClick: e => handleEdgeClick(edge.id, e)\n          }, edge.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), mindmap.nodes.map((node, idx) => {\n        const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\n        const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\n        // ノード背景や色はそのまま\n        let nodeBackground = '#ffffff';\n        let textColor = 'black';\n        let nodeRadius = '4px';\n        if (idx === 0) {\n          nodeBackground = '#006400';\n          textColor = '#ffffff';\n          nodeRadius = '15px';\n        } else if (mindmap.edges && mindmap.nodes.length > 0) {\n          const fromNodeId = mindmap.nodes[0].nodeId;\n          const hasEdgeFromIdx0 = mindmap.edges.some(edge => edge.from === fromNodeId && edge.to === node.nodeId);\n          if (hasEdgeFromIdx0) {\n            nodeBackground = '#50C878';\n            nodeRadius = '4px';\n          }\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: node.x,\n            top: node.y,\n            width: node.width || DEFAULT_NODE_WIDTH,\n            height: node.height || DEFAULT_NODE_HEIGHT,\n            padding: '8px',\n            background: nodeBackground,\n            color: textColor,\n            border: '1.5px solid #aaa',\n            borderRadius: nodeRadius,\n            cursor: isEdgeMode ? 'pointer' : 'move',\n            userSelect: 'none',\n            transform: `scale(${scale})`,\n            transformOrigin: 'center',\n            overflow: 'hidden',\n            boxSizing: 'border-box',\n            position: 'absolute'\n          },\n          onMouseDown: e => handleDragStart(e, idx),\n          onDoubleClick: () => handleNodeDoubleClick(node),\n          onClick: () => handleNodeClick(node),\n          onMouseEnter: () => setHoveredNodeId(node.nodeId),\n          onMouseLeave: () => setHoveredNodeId(null),\n          children: [hoveredNodeId === node.nodeId && editingNodeId !== node.nodeId && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => handleDeleteNode(idx, e),\n            style: {\n              position: 'absolute',\n              top: 2,\n              right: 2,\n              width: 20,\n              height: 20,\n              borderRadius: '50%',\n              background: '#fff',\n              border: '1px solid #ccc',\n              color: 'red',\n              fontWeight: 'bold',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer',\n              zIndex: 10\n            },\n            title: \"\\u30CE\\u30FC\\u30C9\\u3092\\u524A\\u9664\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this), editingNodeId === node.nodeId ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editingText,\n            onChange: e => setEditingText(e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleEditFinish(node.nodeId);\n              }\n            },\n            autoFocus: true,\n            style: {\n              width: '100%',\n              height: '100%',\n              resize: 'none',\n              border: 'none',\n              outline: 'none',\n              background: 'rgba(255,255,255,0.9)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden',\n              lineHeight: '1.4'\n            },\n            dangerouslySetInnerHTML: {\n              __html: marked.parse(node.text, {\n                breaks: true\n              })\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => {\n              e.stopPropagation(); // ノードクリックと重ならないように\n              increaseNodeSize(idx);\n            },\n            style: {\n              position: 'absolute',\n              right: 2,\n              bottom: 2,\n              width: '16px',\n              height: '16px',\n              background: '#ccc',\n              borderRadius: '2px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer',\n              fontSize: '12px',\n              color: '#333'\n            },\n            title: \"\\u30B5\\u30A4\\u30BA\\u3092\\u5927\\u304D\\u304F\\u3059\\u308B\",\n            children: \"\\uFF0B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, node.nodeId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(MindmapCanvas, \"1SYppGudLolqPJcu1FC1z1xMcfA=\");\n_c = MindmapCanvas;\nexport default MindmapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindmapCanvas\");","map":{"version":3,"names":["React","useState","marked","jsxDEV","_jsxDEV","DEFAULT_NODE_WIDTH","DEFAULT_NODE_HEIGHT","MindmapCanvas","mindmap","setMindmap","_s","dragging","setDragging","isDragging","nodeIndex","offsetX","offsetY","isEdgeMode","setIsEdgeMode","edgeStart","setEdgeStart","editingNodeId","setEditingNodeId","editingText","setEditingText","hoveredNodeId","setHoveredNodeId","handleDragStart","e","index","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","container","currentTarget","containerRect","scrollLeft","scrollTop","newX","newY","newNodes","nodes","x","y","handleMouseUp","addNode","newNodeId","Date","now","newNode","nodeId","text","Math","random","width","height","handleNodeClick","node","newEdge","id","from","to","newEdges","edges","handleEdgeClick","edgeId","stopPropagation","window","confirm","filter","edge","getNodeById","find","n","handleNodeDoubleClick","handleEditFinish","map","handleDeleteNode","_","idx","increaseNodeSize","current","edgeModeInfo","style","children","display","alignItems","marginBottom","gap","onClick","canvasStyles","controlButton","fileName","_jsxFileName","lineNumber","columnNumber","prev","background","edgeInfo","position","border","borderRadius","overflow","onMouseMove","onMouseUp","pointerEvents","fromNode","toNode","x1","y1","x2","y2","stroke","strokeWidth","isDraggingNode","scale","nodeBackground","textColor","nodeRadius","length","fromNodeId","hasEdgeFromIdx0","some","padding","color","cursor","userSelect","transform","transformOrigin","boxSizing","onMouseDown","onDoubleClick","onMouseEnter","onMouseLeave","right","fontWeight","justifyContent","zIndex","title","value","onChange","onKeyDown","key","shiftKey","preventDefault","autoFocus","resize","outline","lineHeight","dangerouslySetInnerHTML","__html","parse","breaks","bottom","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/treev/mindmap-app/client/src/components/MindmapCanvas.js"],"sourcesContent":["// client/src/components/MindmapCanvas.js\r\nimport React, { useState } from 'react';\r\nimport { marked } from 'marked';\r\n\r\nconst DEFAULT_NODE_WIDTH = 150;\r\nconst DEFAULT_NODE_HEIGHT = 80;\r\n\r\nfunction MindmapCanvas({ mindmap, setMindmap }) {\r\n  const [dragging, setDragging] = useState({\r\n    isDragging: false,\r\n    nodeIndex: null,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  });\r\n  const [isEdgeMode, setIsEdgeMode] = useState(false);\r\n  const [edgeStart, setEdgeStart] = useState(null);\r\n\r\n  // ノード編集用\r\n  const [editingNodeId, setEditingNodeId] = useState(null);\r\n  const [editingText, setEditingText] = useState('');\r\n\r\n  // ホバー状態のノードID（削除ボタン表示などに利用）\r\n  const [hoveredNodeId, setHoveredNodeId] = useState(null);\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノードサイズ更新（手動リサイズはリサイズハンドルで行うため削除）\r\n  // ---------------------------------------------------------------------\r\n  // → onMouseUp での自動リサイズ呼び出しを削除\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノードのドラッグ開始\r\n  // ---------------------------------------------------------------------\r\n  const handleDragStart = (e, index) => {\r\n    if (isEdgeMode || editingNodeId) return;\r\n    const rect = e.target.getBoundingClientRect();\r\n    const offsetX = e.clientX - rect.left;\r\n    const offsetY = e.clientY - rect.top;\r\n    setDragging({ isDragging: true, nodeIndex: index, offsetX, offsetY });\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ドラッグ中の座標更新\r\n  // ---------------------------------------------------------------------\r\n  const handleMouseMove = (e) => {\r\n    if (!dragging.isDragging) return;\r\n    const container = e.currentTarget;\r\n    const containerRect = container.getBoundingClientRect();\r\n    const scrollLeft = container.scrollLeft;\r\n    const scrollTop = container.scrollTop;\r\n    const newX = e.clientX - containerRect.left + scrollLeft - dragging.offsetX;\r\n    const newY = e.clientY - containerRect.top + scrollTop - dragging.offsetY;\r\n    const newNodes = [...mindmap.nodes];\r\n    newNodes[dragging.nodeIndex] = { ...newNodes[dragging.nodeIndex], x: newX, y: newY };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ドラッグ終了\r\n  // ---------------------------------------------------------------------\r\n  const handleMouseUp = () => {\r\n    if (dragging.isDragging) {\r\n      setDragging({ isDragging: false, nodeIndex: null, offsetX: 0, offsetY: 0 });\r\n    }\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノード追加\r\n  // ---------------------------------------------------------------------\r\n  const addNode = () => {\r\n    const newNodeId = `node_${Date.now()}`;\r\n    const newNode = {\r\n      nodeId: newNodeId,\r\n      text: '新しいノード',\r\n      x: 100 + Math.random() * 200,\r\n      y: 100 + Math.random() * 200,\r\n      width: DEFAULT_NODE_WIDTH,\r\n      height: DEFAULT_NODE_HEIGHT\r\n    };\r\n    setMindmap({ ...mindmap, nodes: [...mindmap.nodes, newNode] });\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノードクリック（エッジモード時のみ）\r\n  // ---------------------------------------------------------------------\r\n  const handleNodeClick = (node) => {\r\n    if (!isEdgeMode) return;\r\n    if (!edgeStart) {\r\n      setEdgeStart(node.nodeId);\r\n    } else {\r\n      if (edgeStart === node.nodeId) {\r\n        setEdgeStart(null);\r\n      } else {\r\n        const newEdge = {\r\n          id: `edge_${Date.now()}`,\r\n          from: edgeStart,\r\n          to: node.nodeId\r\n        };\r\n        const newEdges = mindmap.edges ? [...mindmap.edges, newEdge] : [newEdge];\r\n        setMindmap({ ...mindmap, edges: newEdges });\r\n        setEdgeStart(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // エッジクリックで削除確認\r\n  // ---------------------------------------------------------------------\r\n  const handleEdgeClick = (edgeId, e) => {\r\n    e.stopPropagation();\r\n    if (window.confirm('この線を削除しますか？')) {\r\n      const newEdges = (mindmap.edges || []).filter((edge) => edge.id !== edgeId);\r\n      setMindmap({ ...mindmap, edges: newEdges });\r\n    }\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // nodeId からノード情報を取得\r\n  // ---------------------------------------------------------------------\r\n  const getNodeById = (nodeId) => {\r\n    return mindmap.nodes.find((n) => n.nodeId === nodeId);\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノードのダブルクリックで Markdown 編集モードに切替\r\n  // ---------------------------------------------------------------------\r\n  const handleNodeDoubleClick = (node) => {\r\n    if (isEdgeMode) return;\r\n    setEditingNodeId(node.nodeId);\r\n    setEditingText(node.text);\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // 編集完了：Enter キー（Shift+Enter で改行可能）で Markdown を保存\r\n  // ---------------------------------------------------------------------\r\n  const handleEditFinish = (nodeId) => {\r\n    const newNodes = mindmap.nodes.map((node) =>\r\n      node.nodeId === nodeId ? { ...node, text: editingText } : node\r\n    );\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n    setEditingNodeId(null);\r\n    setEditingText('');\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノード削除\r\n  // ---------------------------------------------------------------------\r\n  const handleDeleteNode = (index, e) => {\r\n    e.stopPropagation();\r\n    const newNodes = mindmap.nodes.filter((_, idx) => idx !== index);\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // ノードサイズ拡大用: 右下のリサイズハンドルをクリック\r\n  // ---------------------------------------------------------------------\r\n  const increaseNodeSize = (index) => {\r\n    const newNodes = [...mindmap.nodes];\r\n    const current = newNodes[index];\r\n    newNodes[index] = {\r\n      ...current,\r\n      width: (current.width || DEFAULT_NODE_WIDTH) + 20,\r\n      height: (current.height || DEFAULT_NODE_HEIGHT) + 20\r\n    };\r\n    setMindmap({ ...mindmap, nodes: newNodes });\r\n  };\r\n\r\n  // ---------------------------------------------------------------------\r\n  // UI: エッジモード情報\r\n  // ---------------------------------------------------------------------\r\n  const edgeModeInfo = isEdgeMode\r\n    ? edgeStart\r\n      ? `エッジ追加中… 開始ノード: ${edgeStart} → 次のノードを選択`\r\n      : 'エッジ追加モード：ノードを選択してください'\r\n    : null;\r\n\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      {/* コントロールバー */}\r\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: 10, gap: '10px' }}>\r\n        <button onClick={addNode} style={canvasStyles.controlButton}>\r\n          ノード追加\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setIsEdgeMode((prev) => !prev);\r\n            setEdgeStart(null);\r\n          }}\r\n          style={{\r\n            ...canvasStyles.controlButton,\r\n            background: isEdgeMode ? '#dc3545' : '#6c757d'\r\n          }}\r\n        >\r\n          {isEdgeMode ? 'エッジ追加解除' : 'エッジ追加モード'}\r\n        </button>\r\n        {edgeModeInfo && <span style={canvasStyles.edgeInfo}>{edgeModeInfo}</span>}\r\n      </div>\r\n\r\n      {/* キャンバス領域 */}\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '500px',\r\n          border: '1px solid #ddd',\r\n          borderRadius: '4px',\r\n          overflow: 'auto'\r\n        }}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n      >\r\n        {/* エッジ用の SVG レイヤー */}\r\n        <svg\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            pointerEvents: 'none'\r\n          }}\r\n        >\r\n          {(mindmap.edges || []).map((edge) => {\r\n            const fromNode = getNodeById(edge.from);\r\n            const toNode = getNodeById(edge.to);\r\n            if (!fromNode || !toNode) return null;\r\n            return (\r\n              <line\r\n                key={edge.id}\r\n                x1={fromNode.x + (fromNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y1={fromNode.y + (fromNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                x2={toNode.x + (toNode.width || DEFAULT_NODE_WIDTH) / 2}\r\n                y2={toNode.y + (toNode.height || DEFAULT_NODE_HEIGHT) / 2}\r\n                stroke=\"#333\"\r\n                strokeWidth=\"2\"\r\n                pointerEvents=\"visibleStroke\"\r\n                onClick={(e) => handleEdgeClick(edge.id, e)}\r\n              />\r\n            );\r\n          })}\r\n        </svg>\r\n\r\n        {/* ノード描画 */}\r\n        {mindmap.nodes.map((node, idx) => {\r\n          const isDraggingNode = dragging.isDragging && dragging.nodeIndex === idx;\r\n          const scale = editingNodeId === node.nodeId ? 1.0 : isDraggingNode ? 1.1 : 1.0;\r\n          // ノード背景や色はそのまま\r\n          let nodeBackground = '#ffffff';\r\n          let textColor = 'black';\r\n          let nodeRadius = '4px';\r\n          if (idx === 0) {\r\n            nodeBackground = '#006400';\r\n            textColor = '#ffffff';\r\n            nodeRadius = '15px';\r\n          } else if (mindmap.edges && mindmap.nodes.length > 0) {\r\n            const fromNodeId = mindmap.nodes[0].nodeId;\r\n            const hasEdgeFromIdx0 = mindmap.edges.some(\r\n              (edge) => edge.from === fromNodeId && edge.to === node.nodeId\r\n            );\r\n            if (hasEdgeFromIdx0) {\r\n              nodeBackground = '#50C878';\r\n              nodeRadius = '4px';\r\n            }\r\n          }\r\n\r\n          return (\r\n            <div\r\n              key={node.nodeId}\r\n              style={{\r\n                position: 'absolute',\r\n                left: node.x,\r\n                top: node.y,\r\n                width: node.width || DEFAULT_NODE_WIDTH,\r\n                height: node.height || DEFAULT_NODE_HEIGHT,\r\n                padding: '8px',\r\n                background: nodeBackground,\r\n                color: textColor,\r\n                border: '1.5px solid #aaa',\r\n                borderRadius: nodeRadius,\r\n                cursor: isEdgeMode ? 'pointer' : 'move',\r\n                userSelect: 'none',\r\n                transform: `scale(${scale})`,\r\n                transformOrigin: 'center',\r\n                overflow: 'hidden',\r\n                boxSizing: 'border-box',\r\n                position: 'absolute'\r\n              }}\r\n              onMouseDown={(e) => handleDragStart(e, idx)}\r\n              onDoubleClick={() => handleNodeDoubleClick(node)}\r\n              onClick={() => handleNodeClick(node)}\r\n              onMouseEnter={() => setHoveredNodeId(node.nodeId)}\r\n              onMouseLeave={() => setHoveredNodeId(null)}\r\n            >\r\n              {hoveredNodeId === node.nodeId && editingNodeId !== node.nodeId && (\r\n                <div\r\n                  onClick={(e) => handleDeleteNode(idx, e)}\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: 2,\r\n                    right: 2,\r\n                    width: 20,\r\n                    height: 20,\r\n                    borderRadius: '50%',\r\n                    background: '#fff',\r\n                    border: '1px solid #ccc',\r\n                    color: 'red',\r\n                    fontWeight: 'bold',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    cursor: 'pointer',\r\n                    zIndex: 10\r\n                  }}\r\n                  title=\"ノードを削除\"\r\n                >\r\n                  ×\r\n                </div>\r\n              )}\r\n              {editingNodeId === node.nodeId ? (\r\n                <textarea\r\n                  value={editingText}\r\n                  onChange={(e) => setEditingText(e.target.value)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                      e.preventDefault();\r\n                      handleEditFinish(node.nodeId);\r\n                    }\r\n                  }}\r\n                  autoFocus\r\n                  style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    resize: 'none',\r\n                    border: 'none',\r\n                    outline: 'none',\r\n                    background: 'rgba(255,255,255,0.9)'\r\n                  }}\r\n                />\r\n              ) : (\r\n                <div\r\n                  style={{ width: '100%', height: '100%', overflow: 'hidden', lineHeight: '1.4' }}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: marked.parse(node.text, { breaks: true })\r\n                  }}\r\n                />\r\n              )}\r\n              {/* 追加: 右下にリサイズハンドル */}\r\n              <div\r\n                onClick={(e) => {\r\n                  e.stopPropagation(); // ノードクリックと重ならないように\r\n                  increaseNodeSize(idx);\r\n                }}\r\n                style={{\r\n                  position: 'absolute',\r\n                  right: 2,\r\n                  bottom: 2,\r\n                  width: '16px',\r\n                  height: '16px',\r\n                  background: '#ccc',\r\n                  borderRadius: '2px',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  cursor: 'pointer',\r\n                  fontSize: '12px',\r\n                  color: '#333'\r\n                }}\r\n                title=\"サイズを大きくする\"\r\n              >\r\n                ＋\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindmapCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}